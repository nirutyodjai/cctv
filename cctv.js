var toolsEl;
var cameras = [];
var currentCam = null;
var poles = [];
var racks = [];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
function initializeToolsPanel() {
    toolsEl = document.getElementById('tools');
    if (toolsEl) {
        toolsEl.innerHTML = `
            <div style="text-align: center; padding: 20px; color: #666;">
                <h4 style="color: #495057; margin-bottom: 15px;">üé• ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á</h4>
                <p style="margin-bottom: 20px;">‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á</p>
                <div style="display: flex; flex-direction: column; gap: 10px;">
                    <button onclick="addBulletCameraMode()" style="background: linear-gradient(45deg, #ffc107, #e0a800); color: #333; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-weight: bold; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.02)'" onmouseout="this.style.transform='scale(1)'">
                        üìπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ö‡∏π‡∏•‡πÄ‡∏•‡πá‡∏ï
                    </button>
                    <button onclick="addDomeCameraMode()" style="background: linear-gradient(45deg, #007bff, #0056b3); color: white; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-weight: bold; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.02)'" onmouseout="this.style.transform='scale(1)'">
                        üîµ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏°
                    </button>
                    <button onclick="addPTZCameraMode()" style="background: linear-gradient(45deg, #dc3545, #c82333); color: white; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-weight: bold; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.02)'" onmouseout="this.style.transform='scale(1)'">
                        üî¥ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á PTZ
                    </button>
                </div>
                <hr style="margin: 20px 0; border: 1px solid #dee2e6;">
                <h4 style="color: #495057; margin-bottom: 15px;">üèóÔ∏è ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ</h4>
                <div style="display: flex; flex-direction: column; gap: 10px;">
                    <button onclick="addRackMode()" style="background: linear-gradient(45deg, #28a745, #1e7e34); color: white; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-weight: bold; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.02)'" onmouseout="this.style.transform='scale(1)'">
                        üóÑÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏π‡πâ Rack
                    </button>
                    <button onclick="addPoleMode()" style="background: linear-gradient(45deg, #6f42c1, #5a2d91); color: white; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-weight: bold; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.02)'" onmouseout="this.style.transform='scale(1)'">
                        üèóÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á
                    </button>
                </div>
            </div>
        `;
    }
}
var cableLines = [];
var totalDistance = 0;
var map;
// ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏π‡πâ Rack (‡∏ö‡∏≤‡∏ó) - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô global ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà
const rackPrices = {6: 3500, 9: 4500, 12: 6500, 18: 8500, 27: 12500, 42: 18500};
// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏π‡πâ Rack
var drawingArea = false;
var areaPoints = [];
var areaPolygon = null;
var areaTempLine = null;
var racks = []; // { id, marker }
// ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (null | 'drawArea' | 'addRack')
var currentTool = null;
// ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Rack
var rackLinks = []; // { fromId, toId, line, cableType }
// ‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÅ‡∏™‡∏á (overlays)
var rectOverlays = []; // { id, center, width, height, angle, color, opacity, polygon, centerMarker, cornerMarkers: [] }
var currentOverlay = null;
// Global drag state
var draggingCornerIdx = -1;
var draggingCenter = false;
var draggingBody = false;
var dragStartData = null;

Math.degrees = function(radians) {
    return radians * 180 / Math.PI;
}

// ====== ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏á‡∏≤‡∏ô (Polygon) ======
function handleAreaClick(e) {
    if (!drawingArea) return;
    areaPoints.push(e.latlng);
    if (areaTempLine) {
        areaTempLine.setLatLngs(areaPoints);
    } else {
        areaTempLine = L.polyline(areaPoints, { color: '#6c757d', dashArray: '5,5' }).addTo(map);
    }
}

function toggleDrawArea() {
    drawingArea = !drawingArea;
    if (drawingArea) {
        currentTool = 'drawArea';
        showNotification('‡πÇ‡∏´‡∏°‡∏î‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î', 'info');
        areaPoints = [];
        if (areaPolygon) { map.removeLayer(areaPolygon); areaPolygon = null; }
        if (areaTempLine) { map.removeLayer(areaTempLine); areaTempLine = null; }
        map.on('click', handleAreaClick);
    } else {
        map.off('click', handleAreaClick);
        if (areaTempLine) { map.removeLayer(areaTempLine); areaTempLine = null; }
        if (areaPoints.length >= 3) {
            areaPolygon = L.polygon(areaPoints, { color: '#ffc107', fillOpacity: 0.1 }).addTo(map);
            showNotification('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
        } else {
            showNotification('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏à‡∏∏‡∏î)', 'error');
        }
        currentTool = null;
    }
}

// ====== ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏π‡πâ Rack ======
function addRackMode() {
    showNotification('‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏π‡πâ Rack: ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏π‡πâ', 'info');
    currentTool = 'addRack';
    const placeRack = (latlng) => {
        const id = 'rack_' + (racks.length + 1);
        const name = id;
        const marker = L.marker(latlng, { title: id, draggable: true }).addTo(map).bindPopup('‡∏ï‡∏π‡πâ Rack: ' + id);
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ô‡∏´‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
        marker.bindTooltip(name, { permanent: true, direction: 'top', offset: [0, -10], className: 'rack-label' });
        const rack = { id, name, marker };
        racks.push(rack);
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≤‡∏¢‡∏ï‡∏π‡πâ
        marker.on('drag', () => updateRackConnections(id));
        marker.on('dragend', () => { try { calculateCosts(); } catch(_){} });
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏Å‡∏≠‡∏£‡πå
        marker.on('dblclick', () => editRackName(rack));
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô select (rackList, rackFrom, rackTo)
        const addOpt = (selId) => {
            const sel = document.getElementById(selId);
            if (sel) {
                const opt = document.createElement('option');
                opt.value = id; opt.textContent = name;
                sel.appendChild(opt);
                if (!sel.value) sel.value = id;
            }
        };
        addOpt('rackList');
        addOpt('rackFrom');
        addOpt('rackTo');
        showNotification('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏π‡πâ Rack ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ' + name, 'success');
        updateCableDropdowns(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï dropdown
        map.off('click', onLeftClick);
        map.off('contextmenu', onRightClick);
        currentTool = null;
    };
    const onLeftClick = (e) => placeRack(e.latlng);
    const onRightClick = (e) => placeRack(e.latlng);
    map.on('click', onLeftClick);
    map.on('contextmenu', onRightClick);
}

// ====== ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á ======
function addPoleMode() {
    showNotification('‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á: ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏™‡∏≤', 'info');
    currentTool = 'addPole';
    const placePole = (latlng) => {
        const id = 'pole_' + (poles.length + 1);
        const name = id;
        const marker = L.marker(latlng, { title: id, draggable: true }).addTo(map).bindPopup('‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á: ' + id);
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ô‡∏´‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
        marker.bindTooltip(name, { permanent: true, direction: 'top', offset: [0, -10], className: 'pole-label' });
        const pole = { id, name, marker };
        poles.push(pole);
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏™‡∏≤
        marker.on('drag', () => updatePoleConnections(id));
        marker.on('dragend', () => { try { calculateCosts(); } catch(_){} });
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏Å‡∏≠‡∏£‡πå
        marker.on('dblclick', () => editPoleName(pole));
        showNotification('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ' + name, 'success');
        updateCableDropdowns(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï dropdown
        map.off('click', onLeftClick);
        map.off('contextmenu', onRightClick);
        currentTool = null;
    };
    const onLeftClick = (e) => placePole(e.latlng);
    const onRightClick = (e) => placePole(e.latlng);
    map.on('click', onLeftClick);
    map.on('contextmenu', onRightClick);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏™‡∏≤
function updatePoleConnections(poleId) {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏™‡∏≤‡∏ô‡∏µ‡πâ
    cableLines.forEach(line => {
        if (line.from === poleId || line.to === poleId) {
            const fromPole = poles.find(p => p.id === line.from);
            const toPole = poles.find(p => p.id === line.to);
            if (fromPole && toPole) {
                line.line.setLatLngs([fromPole.marker.getLatLng(), toPole.marker.getLatLng()]);
            }
        }
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏≤
function editPoleName(pole) {
    const newName = prompt('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏≤:', pole.name);
    if (newName && newName.trim()) {
        pole.name = newName.trim();
        pole.marker.setTooltipContent(pole.name);
        pole.marker.getPopup().setContent('‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á: ' + pole.name);
        showNotification('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ' + pole.name, 'success');
    }
}

// ====== ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡πâ‡∏≠‡∏á ======
function addBulletCameraMode() {
    showNotification('‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ö‡∏π‡∏•‡πÄ‡∏•‡πá‡∏ï: ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á', 'info');
    currentTool = 'addBulletCamera';
    const placeBulletCamera = (latlng) => {
        // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô addCamera ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô type ‡πÄ‡∏õ‡πá‡∏ô BULLET
        var cam = {
            position: latlng,
            angle: 0,
            sensorSize: 6.43,   // mm diagional = 1/2.8"
            focalLength: 2.8,   // mm
            range: 30,          // metres
            type: 'BULLET',     // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô BULLET
        };

        cam.fov = calcFov(cam.sensorSize, cam.focalLength);

        var coords = buildPolyCoords(cam.position, cam.angle, cam.fov, cam.range);
        var ndPolygon = L.polygon(coords).addTo(map);

        var ndCentre = L.circle([cam.position.lat, cam.position.lng], {
            color: 'red',
            fillColor: '#f03',
            fillOpacity: 0.5,
            radius: 0.5
        }).addTo(map);

        // Rotation handle placed ahead of the camera to adjust angle by dragging
        var handleDist = 5; // metres ahead of camera center
        var handlePos = L.GeometryUtil.destination(cam.position, cam.angle, handleDist);
        var ndHandle = L.circleMarker(handlePos, { radius: 4, color: '#0d6efd', fillColor: '#0d6efd', fillOpacity: 0.9, weight: 1 }).addTo(map);

        // Camera icon marker (rotating SVG based on type and angle)
        var ndMarker = L.marker(cam.position, { icon: makeCamIcon(cam), zIndexOffset: 600 }).addTo(map);

        ndPolygon.on('click', function(e) { L.DomEvent.stopPropagation(e); setCurrent(cam) });
        ndCentre.on('click', function(e) { L.DomEvent.stopPropagation(e); setCurrent(cam) });
        ndHandle.on('click', function(e) { L.DomEvent.stopPropagation(e); setCurrent(cam) });
        ndMarker.on('click', function(e) { L.DomEvent.stopPropagation(e); setCurrent(cam) });

        // Emulate dragging the camera by dragging its center
        var draggingCam = false;
        ndCentre.on('mousedown', function(e) {
            draggingCam = true;
            L.DomEvent.stopPropagation(e);
        });
        map.on('mousemove', function(e) {
            if (!draggingCam) return;
            cam.position = e.latlng;
            ndCentre.setLatLng(e.latlng);
            renderCam(cam);
            // move rotation handle to remain at fixed distance ahead of camera
            try { ndHandle.setLatLng(L.GeometryUtil.destination(cam.position, cam.angle, handleDist)); } catch(_) {}
            try { ndMarker.setLatLng(cam.position); } catch(_) {}
            if (currentCam === cam) {
                var posEl = document.getElementById('camPos');
                if (posEl) posEl.textContent = cam.position.lat.toFixed(6) + ', ' + cam.position.lng.toFixed(6);
            }
        });
        map.on('mouseup', function() { draggingCam = false; });

        // Emulate dragging the rotation handle to set camera angle
        var draggingHandle = false;
        ndHandle.on('mousedown', function(e) {
            draggingHandle = true;
            L.DomEvent.stopPropagation(e);
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° cursor style
            map.getContainer().style.cursor = 'crosshair';
        });
        map.on('mousemove', function(e) {
            if (!draggingHandle) return;
            var ang = L.GeometryUtil.bearing(cam.position, e.latlng);
            // Normalize angle to -360..360 range similar to slider
            if (ang > 180) ang = ang - 360;
            cam.angle = ang;
            renderCam(cam);
            // reposition handle along the new angle
            try { ndHandle.setLatLng(L.GeometryUtil.destination(cam.position, cam.angle, handleDist)); } catch(_) {}
            if (currentCam === cam) {
                var angEl = document.getElementById('fld-angle');
                if (angEl) angEl.value = cam.angle;
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
                updateCameraAngleDisplay(cam);
            }
        });
        map.on('mouseup', function() { 
            draggingHandle = false; 
            // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ cursor style
            map.getContainer().style.cursor = '';
        });

        cam.ndPolygon = ndPolygon;
        cam.ndCentre = ndCentre;
        cam.ndHandle = ndHandle;
        cam.ndMarker = ndMarker;
        cameras.push(cam);

        setCurrent(cam);
        
        showNotification('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ö‡∏π‡∏•‡πÄ‡∏•‡πá‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
        map.off('click', onLeftClick);
        map.off('contextmenu', onRightClick);
        currentTool = null;
    };
    
    const onLeftClick = (e) => placeBulletCamera(e.latlng);
    const onRightClick = (e) => placeBulletCamera(e.latlng);
    map.on('click', onLeftClick);
    map.on('contextmenu', onRightClick);
}

function addDomeCameraMode() {
    showNotification('‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏°: ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á', 'info');
    currentTool = 'addDomeCamera';
    const placeDomeCamera = (latlng) => {
        // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô addCamera ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô type ‡πÄ‡∏õ‡πá‡∏ô DOME
        var cam = {
            position: latlng,
            angle: 0,
            sensorSize: 6.43,   // mm diagional = 1/2.8"
            focalLength: 2.8,   // mm
            range: 30,          // metres
            type: 'DOME',       // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô DOME
        };

        cam.fov = calcFov(cam.sensorSize, cam.focalLength);

        var coords = buildPolyCoords(cam.position, cam.angle, cam.fov, cam.range);
        var ndPolygon = L.polygon(coords).addTo(map);

        var ndCentre = L.circle([cam.position.lat, cam.position.lng], {
            color: 'red',
            fillColor: '#f03',
            fillOpacity: 0.5,
            radius: 0.5
        }).addTo(map);

        // Rotation handle placed ahead of the camera to adjust angle by dragging
        var handleDist = 5; // metres ahead of camera center
        var handlePos = L.GeometryUtil.destination(cam.position, cam.angle, handleDist);
        var ndHandle = L.circleMarker(handlePos, { radius: 4, color: '#0d6efd', fillColor: '#0d6efd', fillOpacity: 0.9, weight: 1 }).addTo(map);

        // Camera icon marker (rotating SVG based on type and angle)
        var ndMarker = L.marker(cam.position, { icon: makeCamIcon(cam), zIndexOffset: 600 }).addTo(map);

        ndPolygon.on('click', function(e) { L.DomEvent.stopPropagation(e); setCurrent(cam) });
        ndCentre.on('click', function(e) { L.DomEvent.stopPropagation(e); setCurrent(cam) });
        ndHandle.on('click', function(e) { L.DomEvent.stopPropagation(e); setCurrent(cam) });
        ndMarker.on('click', function(e) { L.DomEvent.stopPropagation(e); setCurrent(cam) });

        // Emulate dragging the camera by dragging its center
        var draggingCam = false;
        ndCentre.on('mousedown', function(e) {
            draggingCam = true;
            L.DomEvent.stopPropagation(e);
        });
        map.on('mousemove', function(e) {
            if (!draggingCam) return;
            cam.position = e.latlng;
            ndCentre.setLatLng(e.latlng);
            renderCam(cam);
            // move rotation handle to remain at fixed distance ahead of camera
            try { ndHandle.setLatLng(L.GeometryUtil.destination(cam.position, cam.angle, handleDist)); } catch(_) {}
            try { ndMarker.setLatLng(cam.position); } catch(_) {}
            if (currentCam === cam) {
                var posEl = document.getElementById('camPos');
                if (posEl) posEl.textContent = cam.position.lat.toFixed(6) + ', ' + cam.position.lng.toFixed(6);
            }
        });
        map.on('mouseup', function() { draggingCam = false; });

        // Emulate dragging the rotation handle to set camera angle
        var draggingHandle = false;
        ndHandle.on('mousedown', function(e) {
            draggingHandle = true;
            L.DomEvent.stopPropagation(e);
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° cursor style
            map.getContainer().style.cursor = 'crosshair';
        });
        map.on('mousemove', function(e) {
            if (!draggingHandle) return;
            var ang = L.GeometryUtil.bearing(cam.position, e.latlng);
            // Normalize angle to -360..360 range similar to slider
            if (ang > 180) ang = ang - 360;
            cam.angle = ang;
            renderCam(cam);
            // reposition handle along the new angle
            try { ndHandle.setLatLng(L.GeometryUtil.destination(cam.position, cam.angle, handleDist)); } catch(_) {}
            if (currentCam === cam) {
                var angEl = document.getElementById('fld-angle');
                if (angEl) angEl.value = cam.angle;
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
                updateCameraAngleDisplay(cam);
            }
        });
        map.on('mouseup', function() { 
            draggingHandle = false; 
            // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ cursor style
            map.getContainer().style.cursor = '';
        });

        cam.ndPolygon = ndPolygon;
        cam.ndCentre = ndCentre;
        cam.ndHandle = ndHandle;
        cam.ndMarker = ndMarker;
        cameras.push(cam);

        setCurrent(cam);
        
        showNotification('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
        map.off('click', onLeftClick);
        map.off('contextmenu', onRightClick);
        currentTool = null;
    };
    
    const onLeftClick = (e) => placeDomeCamera(e.latlng);
    const onRightClick = (e) => placeDomeCamera(e.latlng);
    map.on('click', onLeftClick);
    map.on('contextmenu', onRightClick);
}

function addPTZCameraMode() {
    showNotification('‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á PTZ: ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á', 'info');
    currentTool = 'addPTZCamera';
    const placePTZCamera = (latlng) => {
        // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô addCamera ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô type ‡πÄ‡∏õ‡πá‡∏ô PTZ
        var cam = {
            position: latlng,
            angle: 0,
            sensorSize: 6.43,   // mm diagional = 1/2.8"
            focalLength: 2.8,   // mm
            range: 30,          // metres
            type: 'PTZ',        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô PTZ
        };

        cam.fov = calcFov(cam.sensorSize, cam.focalLength);

        var coords = buildPolyCoords(cam.position, cam.angle, cam.fov, cam.range);
        var ndPolygon = L.polygon(coords).addTo(map);

        var ndCentre = L.circle([cam.position.lat, cam.position.lng], {
            color: 'red',
            fillColor: '#f03',
            fillOpacity: 0.5,
            radius: 0.5
        }).addTo(map);

        // Rotation handle placed ahead of the camera to adjust angle by dragging
        var handleDist = 5; // metres ahead of camera center
        var handlePos = L.GeometryUtil.destination(cam.position, cam.angle, handleDist);
        var ndHandle = L.circleMarker(handlePos, { radius: 4, color: '#0d6efd', fillColor: '#0d6efd', fillOpacity: 0.9, weight: 1 }).addTo(map);

        // Camera icon marker (rotating SVG based on type and angle)
        var ndMarker = L.marker(cam.position, { icon: makeCamIcon(cam), zIndexOffset: 600 }).addTo(map);

        ndPolygon.on('click', function(e) { L.DomEvent.stopPropagation(e); setCurrent(cam) });
        ndCentre.on('click', function(e) { L.DomEvent.stopPropagation(e); setCurrent(cam) });
        ndHandle.on('click', function(e) { L.DomEvent.stopPropagation(e); setCurrent(cam) });
        ndMarker.on('click', function(e) { L.DomEvent.stopPropagation(e); setCurrent(cam) });

        // Emulate dragging the camera by dragging its center
        var draggingCam = false;
        ndCentre.on('mousedown', function(e) {
            draggingCam = true;
            L.DomEvent.stopPropagation(e);
        });
        map.on('mousemove', function(e) {
            if (!draggingCam) return;
            cam.position = e.latlng;
            ndCentre.setLatLng(e.latlng);
            renderCam(cam);
            // move rotation handle to remain at fixed distance ahead of camera
            try { ndHandle.setLatLng(L.GeometryUtil.destination(cam.position, cam.angle, handleDist)); } catch(_) {}
            try { ndMarker.setLatLng(cam.position); } catch(_) {}
            if (currentCam === cam) {
                var posEl = document.getElementById('camPos');
                if (posEl) posEl.textContent = cam.position.lat.toFixed(6) + ', ' + cam.position.lng.toFixed(6);
            }
        });
        map.on('mouseup', function() { draggingCam = false; });

        // Emulate dragging the rotation handle to set camera angle
        var draggingHandle = false;
        ndHandle.on('mousedown', function(e) {
            draggingHandle = true;
            L.DomEvent.stopPropagation(e);
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° cursor style
            map.getContainer().style.cursor = 'crosshair';
        });
        map.on('mousemove', function(e) {
            if (!draggingHandle) return;
            var ang = L.GeometryUtil.bearing(cam.position, e.latlng);
            // Normalize angle to -360..360 range similar to slider
            if (ang > 180) ang = ang - 360;
            cam.angle = ang;
            renderCam(cam);
            // reposition handle along the new angle
            try { ndHandle.setLatLng(L.GeometryUtil.destination(cam.position, cam.angle, handleDist)); } catch(_) {}
            if (currentCam === cam) {
                var angEl = document.getElementById('fld-angle');
                if (angEl) angEl.value = cam.angle;
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
                updateCameraAngleDisplay(cam);
            }
        });
        map.on('mouseup', function() { 
            draggingHandle = false; 
            // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ cursor style
            map.getContainer().style.cursor = '';
        });

        cam.ndPolygon = ndPolygon;
        cam.ndCentre = ndCentre;
        cam.ndHandle = ndHandle;
        cam.ndMarker = ndMarker;
        cameras.push(cam);

        setCurrent(cam);
        
        showNotification('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á PTZ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
        map.off('click', onLeftClick);
        map.off('contextmenu', onRightClick);
        currentTool = null;
    };
    
    const onLeftClick = (e) => placePTZCamera(e.latlng);
    const onRightClick = (e) => placePTZCamera(e.latlng);
    map.on('click', onLeftClick);
    map.on('contextmenu', onRightClick);
}

function addCameraPoleMode() {
    showNotification('‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á: ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏™‡∏≤', 'info');
    currentTool = 'addCameraPole';
    const placeCameraPole = (latlng) => {
        const id = 'pole_' + (cameras.length + 1);
        const name = id;
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á
        const icon = L.divIcon({
            className: 'pole-icon',
            html: '<i class="fas fa-flag"></i>',
            iconSize: [8, 30],
            iconAnchor: [4, 30]
        });
        
        const marker = L.marker(latlng, { 
            title: name, 
            draggable: true,
            icon: icon
        }).addTo(map);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á popup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á
        const popupContent = `
            <div>
                <strong>${name}</strong><br>
                <small>‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á</small><br>
                <button onclick="editCamera('${id}')" class="btn btn-sm btn-primary">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                <button onclick="deleteCameraById('${id}')" class="btn btn-sm btn-danger">‡∏•‡∏ö</button>
            </div>
        `;
        marker.bindPopup(popupContent);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ô‡∏´‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£
        marker.bindTooltip(name, { 
            permanent: true, 
            direction: 'top', 
            offset: [0, -35], 
            className: 'camera-label' 
        });
        
        const camera = { 
            id, 
            name, 
            latlng, 
            marker,
            type: 'pole',
            resolution: 2,
            fov: 90,
            range: 50,
            poleHeight: 6,
            cameraHeight: 4,
            tilt: 0,
            pan: 0,
            price: 0,
            polePrice: 5000
        };
        
        cameras.push(camera);
        currentCam = camera;
        
        // Event listeners
        marker.on('click', () => selectCamera(camera));
        marker.on('drag', () => updateCameraPosition(camera));
        marker.on('dragend', () => { 
            try { calculateCosts(); } catch(_){} 
        });
        marker.on('dblclick', () => editCameraName(camera));
        
        showNotification('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ' + name, 'success');
        map.off('click', onLeftClick);
        map.off('contextmenu', onRightClick);
        currentTool = null;
    };
    
    const onLeftClick = (e) => placeCameraPole(e.latlng);
    const onRightClick = (e) => placeCameraPole(e.latlng);
    map.on('click', onLeftClick);
    map.on('contextmenu', onRightClick);
}

// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
function selectCamera(camera) {
    currentCam = camera;
    updateCameraControls(camera);
    showNotification('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á: ' + camera.name, 'info');
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
function updateCameraPosition(camera) {
    camera.latlng = camera.marker.getLatLng();
}

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á
function editCameraName(camera) {
    const newName = prompt('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á:', camera.name || camera.id);
    if (!newName) return;
    camera.name = newName.trim() || camera.id;
    
    try {
        if (camera.marker && camera.marker.getTooltip()) {
            camera.marker.getTooltip().setContent(camera.name);
        } else if (camera.marker) {
            camera.marker.bindTooltip(camera.name, { 
                permanent: true, 
                direction: 'top', 
                offset: [0, -15], 
                className: 'camera-label' 
            });
        }
        showNotification('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + camera.name, 'success');
    } catch (e) { console.warn(e); }
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
function updateCameraControls(camera) {
    if (!camera) return;
    
    const controls = [
        'cameraType', 'cameraResolution', 'cameraFOV', 'cameraRange',
        'poleHeight', 'cameraHeight', 'cameraTilt', 'cameraPan', 'cameraPrice', 'polePrice'
    ];
    
    controls.forEach(controlId => {
        const control = document.getElementById(controlId);
        if (control) {
            if (control.type === 'select-one') {
                control.value = camera[controlId.replace('camera', '').toLowerCase()] || control.value;
            } else {
                control.value = camera[controlId.replace('camera', '').toLowerCase()] || control.value;
            }
        }
    });
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    updateCameraCalculations(camera);
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏•‡πâ‡∏≠‡∏á
function updateCameraCalculations(camera) {
    if (!camera) return;
    
    const totalHeight = (camera.poleHeight || 0) + (camera.cameraHeight || 0);
    const viewingDistance = calculateViewingDistance(camera);
    const coverageArea = calculateCoverageArea(camera);
    const viewingAngle = camera.fov || 0;
    
    document.getElementById('totalHeight').textContent = totalHeight.toFixed(1);
    document.getElementById('viewingDistance').textContent = viewingDistance;
    document.getElementById('coverageArea').textContent = coverageArea;
    document.getElementById('viewingAngle').textContent = viewingAngle;
}

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏•‡πâ‡∏≠‡∏á
function editCamera(cameraId) {
    const camera = cameras.find(c => c.id === cameraId);
    if (!camera) return;
    
    selectCamera(camera);
    showNotification('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏•‡πâ‡∏≠‡∏á: ' + camera.name, 'info');
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
function calculateViewingDistance(camera) {
    if (!camera.poleHeight || !camera.cameraHeight) return 0;
    
    const totalHeight = camera.poleHeight + camera.cameraHeight;
    const baseRange = camera.range || 50;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏°‡∏™‡∏π‡∏ï‡∏£: ‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô = ‡∏£‡∏∞‡∏¢‡∏∞‡∏ê‡∏≤‡∏ô * (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á / 3)^0.5
    // 3 ‡πÄ‡∏°‡∏ï‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
    const heightFactor = Math.sqrt(totalHeight / 3);
    const calculatedRange = baseRange * heightFactor;
    
    return Math.round(calculatedRange);
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
function calculateCoverageArea(camera) {
    if (!camera.fov || !camera.range) return 0;
    
    const range = calculateViewingDistance(camera);
    const fovRadians = (camera.fov * Math.PI) / 180;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå)
    const area = (fovRadians * range * range) / 2;
    
    return Math.round(area);
}

// ‡∏•‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° ID
function deleteCameraById(cameraId) {
    const camera = cameras.find(c => c.id === cameraId);
    if (!camera) return;
    
    if (confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á: ' + camera.name)) {
        try {
            map.removeLayer(camera.marker);
        } catch (_) {}
        
        cameras = cameras.filter(c => c.id !== cameraId);
        if (currentCam && currentCam.id === cameraId) {
            currentCam = null;
        }
        
        showNotification('‡∏•‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + camera.name, 'success');
        try { calculateCosts(); } catch(_) {}
    }
}

function assignCurrentCamToRack() {
    const rackList = document.getElementById('rackList');
    if (!currentCam) { showNotification('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á', 'error'); return; }
    if (!rackList || !rackList.value) { showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏π‡πâ Rack', 'error'); return; }
    currentCam.rackId = rackList.value;
    showNotification('‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô ' + rackList.value, 'success');
}

// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Rack ‡∏ï‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™
function getRackById(rackId) {
    return racks.find(r => r.id === rackId);
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏π‡πâ Rack ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
function updateRackConnections(rackId) {
    const rack = getRackById(rackId);
    if (!rack) return;
    const latlng = rack.marker.getLatLng();
    (rackLinks || []).forEach(link => {
        if (link.fromId === rackId || link.toId === rackId) {
            const fromRack = getRackById(link.fromId);
            const toRack = getRackById(link.toId);
            if (fromRack && toRack) {
                link.line.setLatLngs([fromRack.marker.getLatLng(), toRack.marker.getLatLng()]);
            }
        }
    });
}

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Rack ‡πÅ‡∏•‡∏∞‡∏ã‡∏¥‡∏á‡∏Å‡πå‡∏Å‡∏±‡∏ö tooltip ‡πÅ‡∏•‡∏∞ dropdowns
function editRackName(rack) {
    const newName = prompt('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏π‡πâ Rack:', rack.name || rack.id);
    if (!newName) return;
    rack.name = newName.trim() || rack.id;
    try {
        if (rack.marker && rack.marker.getTooltip()) {
            rack.marker.getTooltip().setContent(rack.name);
        } else if (rack.marker) {
            rack.marker.bindTooltip(rack.name, { permanent: true, direction: 'top', offset: [0, -10], className: 'rack-label' });
        }
        updateRackNameInSelects(rack);
        showNotification('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏π‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + rack.name, 'success');
    } catch (e) { console.warn(e); }
}

function updateRackNameInSelects(rack) {
    ['rackList','rackFrom','rackTo'].forEach(selId => {
        const sel = document.getElementById(selId);
        if (!sel) return;
        Array.from(sel.options).forEach(opt => {
            if (opt.value === rack.id) opt.textContent = rack.name || rack.id;
        });
    });
}

// ====== ‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÅ‡∏™‡∏á (Overlay Rectangles) ======
function rectCornersFromCenter(center, widthM, heightM, angleDeg) {
    const dx = widthM / 2.0;  // along angle
    const dy = heightM / 2.0; // along angle + 90
    const a = angleDeg || 0;
    const b = a + 90;
    const move = (pt, bearing, meters) => L.GeometryUtil.destination(pt, bearing, meters);
    const p1 = move(move(center, a, +dx), b, +dy);
    const p2 = move(move(center, a, +dx), b, -dy);
    const p3 = move(move(center, a, -dx), b, -dy);
    const p4 = move(move(center, a, -dx), b, +dy);
    return [p1, p2, p3, p4];
}

function styleOverlayPolygon(poly, selected) {
    if (!poly) return;
    poly.setStyle(selected ? { color: '#ffcc00', weight: 2, dashArray: '4,2' } : { color: '#ff0000', weight: 1, dashArray: null });
}

function selectOverlay(ov) {
    // clear previous
    rectOverlays.forEach(o => styleOverlayPolygon(o.polygon, false));
    currentOverlay = ov || null;
    if (currentOverlay) {
        styleOverlayPolygon(currentOverlay.polygon, true);
        refreshOverlayControlsFromCurrent();
        showNotification('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°', 'info');
    }
}

function refreshOverlayControlsFromCurrent() {
    const ov = currentOverlay; if (!ov) return;
    const fillEl = document.getElementById('rectFillColor');
    const opEl = document.getElementById('rectOpacity');
    const wEl = document.getElementById('rectWidth');
    const hEl = document.getElementById('rectHeight');
    const aEl = document.getElementById('rectAngle');
    if (fillEl) fillEl.value = ov.color || '#ff0000';
    if (opEl) opEl.value = typeof ov.opacity === 'number' ? ov.opacity : 0.3;
    if (wEl) wEl.value = Math.round(ov.width || 50);
    if (hEl) hEl.value = Math.round(ov.height || 30);
    if (aEl) aEl.value = Math.round(ov.angle || 0);
}

function updateOverlayGeometry(ov) {
    if (!ov || !ov.polygon) return;
    const corners = rectCornersFromCenter(ov.center, ov.width, ov.height, ov.angle);
    ov.polygon.setLatLngs(corners);
    if (ov.centerMarker) ov.centerMarker.setLatLng(ov.center);
    if (ov.cornerMarkers && ov.cornerMarkers.length === corners.length) {
        ov.cornerMarkers.forEach((mk, i) => { try { mk.setLatLng(corners[i]); } catch(_) {} });
    }
    // Update rotation handle position
    if (ov.rotationHandle) {
        const rotationPoint = L.GeometryUtil.destination(ov.center, ov.angle, ov.height / 2 + 20);
        ov.rotationHandle.setLatLng(rotationPoint);
    }
}

function updateOverlayStyle(ov) {
    if (!ov || !ov.polygon) return;
    ov.polygon.setStyle({ fillColor: ov.color, fillOpacity: ov.opacity });
}

function createRectOverlay(center, opts = {}) {
    const ov = {
        id: 'rect_' + Date.now(),
        center: center,
        width: opts.width || (parseFloat(document.getElementById('rectWidth')?.value) || 50),
        height: opts.height || (parseFloat(document.getElementById('rectHeight')?.value) || 30),
        angle: opts.angle || (parseFloat(document.getElementById('rectAngle')?.value) || 0),
        color: opts.color || (document.getElementById('rectFillColor')?.value || '#ff0000'),
        opacity: typeof opts.opacity === 'number' ? opts.opacity : (parseFloat(document.getElementById('rectOpacity')?.value) || 0.3),
        polygon: null,
        centerMarker: null,
        cornerMarkers: [],
        rotationHandle: null
    };
    
    const corners = rectCornersFromCenter(ov.center, ov.width, ov.height, ov.angle);
    const poly = L.polygon(corners, { 
        color: '#ff0000', 
        fillColor: ov.color, 
        fillOpacity: ov.opacity, 
        weight: 2,
        interactive: true
    }).addTo(map);
    ov.polygon = poly;
    styleOverlayPolygon(poly, false);
    
    // Center marker for dragging
    const ctr = L.circleMarker(ov.center, { 
        radius: 6, 
        color: '#333', 
        fillColor: '#fff', 
        fillOpacity: 0.9, 
        weight: 2,
        interactive: true
    }).addTo(map);
    ov.centerMarker = ctr;
    
    // Corner markers for resizing
    corners.forEach((pt, i) => {
        const mk = L.circleMarker(pt, { 
            radius: 5, 
            color: '#212529', 
            fillColor: '#ffffff', 
            fillOpacity: 0.9, 
            weight: 2,
            interactive: true
        }).addTo(map);
        ov.cornerMarkers.push(mk);
    });
    
    // Rotation handle
    const rotationPoint = L.GeometryUtil.destination(ov.center, ov.angle, ov.height / 2 + 20);
    const rotHandle = L.circleMarker(rotationPoint, {
        radius: 4,
        color: '#007bff',
        fillColor: '#007bff',
        fillOpacity: 0.8,
        weight: 1,
        interactive: true
    }).addTo(map);
    ov.rotationHandle = rotHandle;
    
    // Event handlers
    setupOverlayEventHandlers(ov);
    
    rectOverlays.push(ov);
    selectOverlay(ov);
    return ov;
}

function setupOverlayEventHandlers(ov) {
    // Center marker drag
    ov.centerMarker.on('mousedown', (e) => {
        L.DomEvent.stopPropagation(e);
        selectOverlay(ov);
        draggingCenter = true;
        dragStartData = { center: ov.center };
    });
    
    // Polygon body drag and selection
    ov.polygon.on('click', (e) => {
        L.DomEvent.stopPropagation(e);
        selectOverlay(ov);
    });
    
    ov.polygon.on('mousedown', (e) => {
        L.DomEvent.stopPropagation(e);
        selectOverlay(ov);
        draggingBody = true;
        dragStartData = {
            mousePos: map.latLngToLayerPoint(e.latlng),
            center: ov.center
        };
    });
    
    // Corner markers for resizing
    ov.cornerMarkers.forEach((marker, idx) => {
        marker.on('mousedown', (e) => {
        L.DomEvent.stopPropagation(e);
        selectOverlay(ov);
        draggingCornerIdx = idx;
            dragStartData = {
                center: ov.center,
                width: ov.width,
                height: ov.height,
                angle: ov.angle
            };
        });
        
        marker.on('click', (e) => {
            L.DomEvent.stopPropagation(e);
            selectOverlay(ov);
        });
    });
    
    // Rotation handle
    ov.rotationHandle.on('mousedown', (e) => {
        L.DomEvent.stopPropagation(e);
    selectOverlay(ov);
        dragStartData = {
            center: ov.center,
            startAngle: ov.angle
        };
    });
    
    ov.rotationHandle.on('click', (e) => {
        L.DomEvent.stopPropagation(e);
        selectOverlay(ov);
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
function deleteSelected() {
    let deletedCount = 0;
    
    // ‡∏•‡∏ö‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÅ‡∏™‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (currentOverlay) {
        try {
            if (currentOverlay.polygon) map.removeLayer(currentOverlay.polygon);
            if (currentOverlay.centerMarker) map.removeLayer(currentOverlay.centerMarker);
            if (currentOverlay.cornerMarkers && currentOverlay.cornerMarkers.length) {
                currentOverlay.cornerMarkers.forEach(mk => { try { map.removeLayer(mk); } catch(_) {} });
            }
            if (currentOverlay.rotationHandle) map.removeLayer(currentOverlay.rotationHandle);
        } catch (_) {}
        rectOverlays = rectOverlays.filter(o => o !== currentOverlay);
        currentOverlay = null;
        deletedCount++;
    }
    
    // ‡∏•‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (currentCam) {
        try {
            map.removeLayer(currentCam);
            cameras = cameras.filter(cam => cam !== currentCam);
        } catch (_) {}
        currentCam = null;
        deletedCount++;
    }
    
    // ‡∏•‡∏ö‡∏ï‡∏π‡πâ Rack ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const selectedRack = getSelectedRack();
    if (selectedRack) {
        deleteRack(selectedRack.id);
        deletedCount++;
    }
    
    // ‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const selectedCable = getSelectedCable();
    if (selectedCable) {
        deleteCable(selectedCable);
        deletedCount++;
    }
    
    if (deletedCount > 0) {
        showNotification(`‡∏•‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ ${deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß`, 'success');
        try { calculateCosts(); } catch(_) {}
    } else {
        showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡πà‡∏≠‡∏ô', 'error');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô)
function deleteClickedObject(e) {
    const clickedElement = e.target;
    let deleted = false;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (clickedElement._icon && clickedElement._icon.classList.contains('cam-icon-wrapper')) {
        const camera = cameras.find(cam => cam._icon === clickedElement._icon);
        if (camera) {
            deleteCamera(camera);
            deleted = true;
        }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏π‡πâ Rack ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (clickedElement._icon && clickedElement._icon.classList.contains('rack-label')) {
        const rackId = clickedElement.options?.title;
        if (rackId) {
            deleteRack(rackId);
            deleted = true;
        }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÅ‡∏™‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (clickedElement._path && clickedElement._path.classList.contains('leaflet-interactive')) {
        const overlay = rectOverlays.find(ov => ov.polygon === clickedElement);
        if (overlay) {
            deleteCurrentOverlay();
            deleted = true;
        }
    }
    
    if (!deleted) {
        showNotification('‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö', 'info');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÅ‡∏™‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
function deleteCurrentOverlay() {
    if (!currentOverlay) { showNotification('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°', 'error'); return; }
    try {
        if (currentOverlay.polygon) map.removeLayer(currentOverlay.polygon);
        if (currentOverlay.centerMarker) map.removeLayer(currentOverlay.centerMarker);
        if (currentOverlay.cornerMarkers && currentOverlay.cornerMarkers.length) {
            currentOverlay.cornerMarkers.forEach(mk => { try { map.removeLayer(mk); } catch(_) {} });
        }
        if (currentOverlay.rotationHandle) map.removeLayer(currentOverlay.rotationHandle);
    } catch (_) {}
    rectOverlays = rectOverlays.filter(o => o !== currentOverlay);
    currentOverlay = null;
    showNotification('‡∏•‡∏ö‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏•‡πâ‡∏ß', 'success');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏ï‡∏π‡πâ Rack
function deleteRack(rackId) {
    const rack = getRackById(rackId);
    if (!rack) {
        showNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏π‡πâ Rack ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö', 'error');
        return;
    }
    
    // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const linksToRemove = rackLinks.filter(link => link.fromId === rackId || link.toId === rackId);
    linksToRemove.forEach(link => {
        try {
            if (link.line) map.removeLayer(link.line);
        } catch (_) {}
    });
    rackLinks = rackLinks.filter(link => link.fromId !== rackId && link.toId !== rackId);
    
    // ‡∏•‡∏ö‡∏°‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏Å‡∏≠‡∏£‡πå
    try {
        if (rack.marker) map.removeLayer(rack.marker);
    } catch (_) {}
    
    // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå
    racks = racks.filter(r => r.id !== rackId);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï dropdowns
    ['rackList', 'rackFrom', 'rackTo'].forEach(selId => {
        const sel = document.getElementById(selId);
        if (sel) {
            const options = sel.querySelectorAll(`option[value="${rackId}"]`);
            options.forEach(opt => opt.remove());
            if (sel.value === rackId) {
                sel.value = sel.options.length > 0 ? sel.options[0].value : '';
            }
        }
    });
    
    showNotification(`‡∏•‡∏ö‡∏ï‡∏π‡πâ Rack ${rack.name} ‡πÅ‡∏•‡πâ‡∏ß`, 'success');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•
function deleteCable(cable) {
    try {
        if (cable && cable.remove) {
            map.removeLayer(cable);
            cableLines = cableLines.filter(line => line !== cable);
            showNotification('‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•‡πÅ‡∏•‡πâ‡∏ß', 'success');
        }
    } catch (_) {
        showNotification('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•‡πÑ‡∏î‡πâ', 'error');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏π‡πâ Rack
function deleteRackConnection(fromId, toId) {
    const linkIndex = rackLinks.findIndex(link => 
        (link.fromId === fromId && link.toId === toId) || 
        (link.fromId === toId && link.toId === fromId)
    );
    
    if (linkIndex !== -1) {
        const link = rackLinks[linkIndex];
        try {
            if (link.line) map.removeLayer(link.line);
        } catch (_) {}
        rackLinks.splice(linkIndex, 1);
        showNotification(`‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ${fromId} ‚Üî ${toId} ‡πÅ‡∏•‡πâ‡∏ß`, 'success');
        try { calculateCosts(); } catch(_) {}
    } else {
        showNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö', 'error');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á
function deleteCamera(camera) {
    if (!camera) {
        showNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö', 'error');
        return;
    }
    
    try {
        map.removeLayer(camera);
        cameras = cameras.filter(cam => cam !== camera);
        if (currentCam === camera) {
            currentCam = null;
        }
        showNotification('‡∏•‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß', 'success');
    } catch (_) {
        showNotification('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ', 'error');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
function deleteCurrentCamera() {
    if (!currentCam) {
        showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡πà‡∏≠‡∏ô', 'error');
        return;
    }
    deleteCamera(currentCam);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏á‡∏≤‡∏ô
function deleteWorkArea() {
    if (areaPolygon) {
        try {
            map.removeLayer(areaPolygon);
        } catch (_) {}
        areaPolygon = null;
        showNotification('‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß', 'success');
    } else {
        showNotification('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏•‡∏ö', 'error');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á
function deleteAll() {
    if (!confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á? ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ')) {
        return;
    }
    
    let deletedCount = 0;
    
    // ‡∏•‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    cameras.forEach(cam => {
        try { if (cam.marker) map.removeLayer(cam.marker); } catch(_) {}
        deletedCount++;
    });
    cameras = [];
    currentCam = null;
    
    // ‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    cableLines.forEach(line => {
        try { map.removeLayer(line); } catch(_) {}
        deletedCount++;
    });
    cableLines = [];
    
    // ‡∏•‡∏ö‡∏ï‡∏π‡πâ Rack ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    racks.forEach(rack => {
        try { if (rack.marker) map.removeLayer(rack.marker); } catch(_) {}
        deletedCount++;
    });
    racks = [];
    rackLinks.forEach(link => {
        try { if (link.line) map.removeLayer(link.line); } catch(_) {}
    });
    rackLinks = [];
    
    // ‡∏•‡∏ö‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    poles.forEach(pole => {
        try { if (pole.marker) map.removeLayer(pole.marker); } catch(_) {}
        deletedCount++;
    });
    poles = [];
    
    // ‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    cableConnections.forEach(conn => {
        try { if (conn.line) map.removeLayer(conn.line); } catch(_) {}
        deletedCount++;
    });
    cableConnections = [];
    
    // ‡∏•‡∏ö‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÅ‡∏™‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    rectOverlays.forEach(overlay => {
        try {
            if (overlay.polygon) map.removeLayer(overlay.polygon);
            if (overlay.centerMarker) map.removeLayer(overlay.centerMarker);
            if (overlay.cornerMarkers) {
                overlay.cornerMarkers.forEach(mk => { try { map.removeLayer(mk); } catch(_) {} });
            }
            if (overlay.rotationHandle) map.removeLayer(overlay.rotationHandle);
        } catch (_) {}
        deletedCount++;
    });
    rectOverlays = [];
    currentOverlay = null;
    
    // ‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏á‡∏≤‡∏ô
    if (areaPolygon) {
        try { map.removeLayer(areaPolygon); } catch(_) {}
        areaPolygon = null;
        deletedCount++;
    }
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    locationTexts.forEach(textObj => {
        try { if (textObj.marker) map.removeLayer(textObj.marker); } catch(_) {}
        deletedCount++;
    });
    locationTexts = [];
    
    // ‡∏•‡πâ‡∏≤‡∏á dropdowns
    ['rackList', 'rackFrom', 'rackTo'].forEach(selId => {
        const sel = document.getElementById(selId);
        if (sel) {
            sel.innerHTML = '';
        }
    });
    
    showNotification(`‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß (${deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`, 'success');
    try { calculateCosts(); } catch(_) {}
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
function getSelectedRack() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å dropdown ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const rackList = document.getElementById('rackList');
    if (rackList && rackList.value) {
        return getRackById(rackList.value);
    }
    return null;
}

function getSelectedCable() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•
    return null;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏ï‡∏π‡πâ Rack ‡∏à‡∏≤‡∏Å dropdown
function deleteSelectedRack() {
    const selectedRack = getSelectedRack();
    if (selectedRack) {
        deleteRack(selectedRack.id);
    } else {
        showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏π‡πâ Rack ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö', 'error');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
function deleteSelectedConnection() {
    const fromSel = document.getElementById('rackFrom');
    const toSel = document.getElementById('rackTo');
    if (!fromSel || !toSel || !fromSel.value || !toSel.value) {
        showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏π‡πâ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á', 'error');
        return;
    }
    deleteRackConnection(fromSel.value, toSel.value);
}

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° UI ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
function wireCameraControls() {
    const cameraControls = [
        'cameraType', 'cameraResolution', 'cameraFOV', 'cameraRange',
        'poleHeight', 'cameraHeight', 'cameraTilt', 'cameraPan', 'cameraPrice', 'polePrice'
    ];
    
    cameraControls.forEach(controlId => {
        const control = document.getElementById(controlId);
        if (control) {
            control.addEventListener('change', () => {
                if (currentCam) {
                    const propertyName = controlId.replace('camera', '').toLowerCase();
                    if (control.type === 'select-one') {
                        currentCam[propertyName] = control.value;
                    } else {
                        currentCam[propertyName] = parseFloat(control.value) || 0;
                    }
                    showNotification('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß', 'success');
                    updateCameraCalculations(currentCam);
                    try { calculateCosts(); } catch(_) {}
                }
            });
        }
    });
}

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° UI ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÅ‡∏™‡∏á
function wireOverlayControls() {
    const addBtn = document.getElementById('addRectOverlay');
    const delBtn = document.getElementById('deleteSelected');
    const fillEl = document.getElementById('rectFillColor');
    const opEl = document.getElementById('rectOpacity');
    const wEl = document.getElementById('rectWidth');
    const hEl = document.getElementById('rectHeight');
    const aEl = document.getElementById('rectAngle');

    if (addBtn) addBtn.addEventListener('click', () => {
        if (!map) return;
        const center = map.getCenter();
        createRectOverlay(center, {});
    });
    if (delBtn) delBtn.addEventListener('click', deleteSelected);

    const apply = () => {
        if (!currentOverlay) return;
        if (fillEl) currentOverlay.color = fillEl.value || currentOverlay.color;
        if (opEl) currentOverlay.opacity = parseFloat(opEl.value) || currentOverlay.opacity;
        if (wEl) currentOverlay.width = Math.max(1, parseFloat(wEl.value) || currentOverlay.width);
        if (hEl) currentOverlay.height = Math.max(1, parseFloat(hEl.value) || currentOverlay.height);
        if (aEl) currentOverlay.angle = parseFloat(aEl.value) || currentOverlay.angle;
        updateOverlayStyle(currentOverlay);
        updateOverlayGeometry(currentOverlay);
        showNotification('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏•‡πâ‡∏ß', 'success');
    };

    [fillEl, opEl, wEl, hEl, aEl].forEach(el => {
        if (!el) return;
        const evt = (el.id === 'rectFillColor' || el.tagName === 'SELECT') ? 'change' : 'input';
        el.addEventListener(evt, apply);
    });

    if (map) {
        map.on('click', () => { selectOverlay(null); });
    }
}

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡∏π‡πâ Rack ‡∏™‡∏≠‡∏á‡πÉ‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡πâ‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏≤‡∏¢
function connectSelectedRacks() {
    const fromSel = document.getElementById('rackFrom');
    const toSel = document.getElementById('rackTo');
    if (!fromSel || !toSel) { showNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏π‡πâ Rack', 'error'); return; }
    const fromId = fromSel.value;
    const toId = toSel.value;
    if (!fromId || !toId || fromId === toId) {
        showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏π‡πâ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô', 'error');
        return;
    }
    const fromRack = getRackById(fromId);
    const toRack = getRackById(toId);
    if (!fromRack || !toRack) {
        showNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà', 'error');
        return;
    }

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ã‡πâ‡∏≥ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö ‡πÅ‡∏ï‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô)
    const exists = (rackLinks || []).some(l => (l.fromId === fromId && l.toId === toId) || (l.fromId === toId && l.toId === fromId));
    if (exists) {
        showNotification('‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡∏π‡πâ‡∏Ñ‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß', 'info');
        return;
    }

    // ‡πÉ‡∏ä‡πâ‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const typeEl = document.getElementById('cableType');
    const cableType = typeEl ? typeEl.value : 'UTP';
    const color = cableType === 'FIBER' ? '#0d6efd' : '#198754';

    const fromLatLng = fromRack.marker.getLatLng();
    const toLatLng = toRack.marker.getLatLng();
    const line = L.polyline([fromLatLng, toLatLng], { color, weight: 4, dashArray: '6,4' }).addTo(map);
    line.cableType = cableType;

    rackLinks.push({ fromId, toId, line, cableType });
    showNotification(`‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° ${fromId} ‚Üí ${toId} ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏≤‡∏¢ ${cableType}`, 'success');
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡∏π‡πâ
    try { calculateCosts(); } catch (_) {}
}

/**
 * Build the coords for a polygon
 */
function buildPolyCoords(latlng, facingAngle, spanAngle, distMetres) {
    var pt1 = L.GeometryUtil.destination(latlng, facingAngle - (spanAngle / 2.0), distMetres);
    var pt2 = L.GeometryUtil.destination(latlng, facingAngle - (spanAngle / 4.0), distMetres);
    var pt3 = L.GeometryUtil.destination(latlng, facingAngle, distMetres);
    var pt4 = L.GeometryUtil.destination(latlng, facingAngle + (spanAngle / 4.0), distMetres);
    var pt5 = L.GeometryUtil.destination(latlng, facingAngle + (spanAngle / 2.0), distMetres);
    return [
        [latlng.lat, latlng.lng],
        [pt1.lat, pt1.lng],
        [pt2.lat, pt2.lng],
        [pt3.lat, pt3.lng],
        [pt4.lat, pt4.lng],
        [pt5.lat, pt5.lng],
    ];
}

/**
 * Add a camera at a given coordinate
 */
function addCamera(latlng) {
    var cam = {
        position: latlng,
        angle: 0,
        sensorSize: 6.43,   // mm diagional = 1/2.8"
        focalLength: 2.8,   // mm
        range: 30,          // metres
        type: 'BULLET',     // DOME | BULLET | PTZ
    };

    cam.fov = calcFov(cam.sensorSize, cam.focalLength);

    var coords = buildPolyCoords(cam.position, cam.angle, cam.fov, cam.range);
    var ndPolygon = L.polygon(coords).addTo(map);

    var ndCentre = L.circle([cam.position.lat, cam.position.lng], {
        color: 'red',
        fillColor: '#f03',
        fillOpacity: 0.5,
        radius: 0.5
    }).addTo(map);

    // Rotation handle placed ahead of the camera to adjust angle by dragging
    var handleDist = 5; // metres ahead of camera center
    var handlePos = L.GeometryUtil.destination(cam.position, cam.angle, handleDist);
    var ndHandle = L.circleMarker(handlePos, { radius: 4, color: '#0d6efd', fillColor: '#0d6efd', fillOpacity: 0.9, weight: 1 }).addTo(map);

    // Camera icon marker (rotating SVG based on type and angle)
    var ndMarker = L.marker(cam.position, { icon: makeCamIcon(cam), zIndexOffset: 600 }).addTo(map);

    ndPolygon.on('click', function(e) { L.DomEvent.stopPropagation(e); setCurrent(cam) });
    ndCentre.on('click', function(e) { L.DomEvent.stopPropagation(e); setCurrent(cam) });
    ndHandle.on('click', function(e) { L.DomEvent.stopPropagation(e); setCurrent(cam) });
    ndMarker.on('click', function(e) { L.DomEvent.stopPropagation(e); setCurrent(cam) });

    // Emulate dragging the camera by dragging its center
    var draggingCam = false;
    ndCentre.on('mousedown', function(e) {
        draggingCam = true;
        L.DomEvent.stopPropagation(e);
    });
    map.on('mousemove', function(e) {
        if (!draggingCam) return;
        cam.position = e.latlng;
        ndCentre.setLatLng(e.latlng);
        renderCam(cam);
        // move rotation handle to remain at fixed distance ahead of camera
        try { ndHandle.setLatLng(L.GeometryUtil.destination(cam.position, cam.angle, handleDist)); } catch(_) {}
        try { ndMarker.setLatLng(cam.position); } catch(_) {}
        if (currentCam === cam) {
            var posEl = document.getElementById('camPos');
            if (posEl) posEl.textContent = cam.position.lat.toFixed(6) + ', ' + cam.position.lng.toFixed(6);
        }
    });
    map.on('mouseup', function() { draggingCam = false; });

    // Emulate dragging the rotation handle to set camera angle
    var draggingHandle = false;
    ndHandle.on('mousedown', function(e) {
        draggingHandle = true;
        L.DomEvent.stopPropagation(e);
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° cursor style
        map.getContainer().style.cursor = 'crosshair';
    });
    map.on('mousemove', function(e) {
        if (!draggingHandle) return;
        var ang = L.GeometryUtil.bearing(cam.position, e.latlng);
        // Normalize angle to -360..360 range similar to slider
        if (ang > 180) ang = ang - 360;
        cam.angle = ang;
        renderCam(cam);
        // reposition handle along the new angle
        try { ndHandle.setLatLng(L.GeometryUtil.destination(cam.position, cam.angle, handleDist)); } catch(_) {}
        if (currentCam === cam) {
            var angEl = document.getElementById('fld-angle');
            if (angEl) angEl.value = cam.angle;
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
            updateCameraAngleDisplay(cam);
        }
    });
    map.on('mouseup', function() { 
        draggingHandle = false; 
        // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ cursor style
        map.getContainer().style.cursor = '';
    });

    cam.ndPolygon = ndPolygon;
    cam.ndCentre = ndCentre;
    cam.ndHandle = ndHandle;
    cam.ndMarker = ndMarker;
    cameras.push(cam);

    setCurrent(cam);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slider ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á UI
    setTimeout(() => {
        const angleSlider = document.getElementById('fld-angle');
        if (angleSlider) {
            angleSlider.addEventListener('input', function() {
                const newAngle = parseFloat(this.value);
                if (currentCam === cam) {
                    cam.angle = newAngle;
                    renderCam(cam);
                    updateCameraAngleDisplay(cam);
                    
                    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á handle
                    const handleDist = 5;
                    try {
                        const handlePos = L.GeometryUtil.destination(cam.position, cam.angle, handleDist);
                        cam.ndHandle.setLatLng(handlePos);
                    } catch(_) {}
                }
            });
        }
    }, 100);
}

function calcFov(sensorSize, focalLength) {
    return Math.degrees(2 * Math.atan(sensorSize / (2.0 * focalLength)));
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
function updateCameraAngleDisplay(cam) {
    const angleDisplay = document.getElementById('cameraAngleDisplay');
    if (angleDisplay) {
        angleDisplay.textContent = `${cam.angle.toFixed(1)}¬∞`;
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
    const directionDisplay = document.getElementById('cameraDirectionDisplay');
    if (directionDisplay) {
        const direction = getDirectionFromAngle(cam.angle);
        directionDisplay.textContent = direction;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏∏‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
function getDirectionFromAngle(angle) {
    const normalizedAngle = ((angle % 360) + 360) % 360;
    
    if (normalizedAngle >= 337.5 || normalizedAngle < 22.5) return '‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠';
    if (normalizedAngle >= 22.5 && normalizedAngle < 67.5) return '‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠';
    if (normalizedAngle >= 67.5 && normalizedAngle < 112.5) return '‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å';
    if (normalizedAngle >= 112.5 && normalizedAngle < 157.5) return '‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÉ‡∏ï‡πâ';
    if (normalizedAngle >= 157.5 && normalizedAngle < 202.5) return '‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ';
    if (normalizedAngle >= 202.5 && normalizedAngle < 247.5) return '‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÉ‡∏ï‡πâ';
    if (normalizedAngle >= 247.5 && normalizedAngle < 292.5) return '‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å';
    if (normalizedAngle >= 292.5 && normalizedAngle < 337.5) return '‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠';
    
    return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
function setCameraAngle(newAngle) {
    if (!currentCam) return;
    
    // Normalize angle to -360..360 range
    if (newAngle > 360) newAngle = newAngle - 360;
    if (newAngle < -360) newAngle = newAngle + 360;
    
    currentCam.angle = newAngle;
    renderCam(currentCam);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
    const angleSlider = document.getElementById('fld-angle');
    if (angleSlider) {
        angleSlider.value = newAngle;
    }
    
    updateCameraAngleDisplay(currentCam);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á handle
    const handleDist = 5;
    try {
        const handlePos = L.GeometryUtil.destination(currentCam.position, currentCam.angle, handleDist);
        currentCam.ndHandle.setLatLng(handlePos);
    } catch(_) {}
    
    showNotification(`‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô ${newAngle.toFixed(1)}¬∞ (${getDirectionFromAngle(newAngle)})`, 'success');
}

/**
 * Set the current camera in the tools panel
 */
function setCurrent(cam) {
    toolsEl.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; padding: 10px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
            <div>
                <strong style="color: #495057;">‡∏û‡∏¥‡∏Å‡∏±‡∏î:</strong> 
                <span id="camPos" style="color: #6c757d; font-family: monospace;">${cam.position.lat.toFixed(6)}, ${cam.position.lng.toFixed(6)}</span>
            </div>
            <button onclick="clearCurrentCamera()" style="background: linear-gradient(45deg, #dc3545, #c82333); color: white; border: none; padding: 8px 15px; border-radius: 6px; cursor: pointer; font-size: 14px; font-weight: bold; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.3s ease;" title="‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">‚ùå ‡∏õ‡∏¥‡∏î</button>
        </div>
        <br>
        <div class="camera-controls">
            <div class="angle-control">
                <label>‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡∏≠‡∏á‡∏®‡∏≤): </label>
                <div class="angle-display">
                    <span id="cameraAngleDisplay">${cam.angle.toFixed(1)}¬∞</span>
                    <span id="cameraDirectionDisplay">${getDirectionFromAngle(cam.angle)}</span>
                </div>
                <input type="range" min="-360" max="360" id="fld-angle" value="${cam.angle}" step="0.1">
                <div class="angle-buttons">
                    <button onclick="setCameraAngle(${cam.angle - 90})" title="‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ 90¬∞">‚Ü∂ 90¬∞</button>
                    <button onclick="setCameraAngle(${cam.angle - 45})" title="‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ 45¬∞">‚Ü∂ 45¬∞</button>
                    <button onclick="setCameraAngle(${cam.angle + 45})" title="‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤ 45¬∞">45¬∞ ‚Ü∑</button>
                    <button onclick="setCameraAngle(${cam.angle + 90})" title="‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤ 90¬∞">90¬∞ ‚Ü∑</button>
                </div>
            </div>
        </div>
        <br>
        <br><label>‡∏ä‡∏ô‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á: </label>
        <select id="fld-type">
            <option value="BULLET" ${cam.type==='BULLET'?'selected':''}>‡∏ö‡∏π‡∏•‡πÄ‡∏•‡πá‡∏ï (Bullet)</option>
            <option value="DOME" ${cam.type==='DOME'?'selected':''}>‡πÇ‡∏î‡∏° (Dome)</option>
            <option value="PTZ" ${cam.type==='PTZ'?'selected':''}>PTZ</option>
        </select>
        <br>
        <br>‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå: ${cam.sensorSize} ‡∏°‡∏°.
        <br>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÇ‡∏ü‡∏Å‡∏±‡∏™: ${cam.focalLength} ‡∏°‡∏°.
        <br>
        <br><label>‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô (‡πÄ‡∏°‡∏ï‡∏£): </label> <input type="range" min="1" max="100" id="fld-range" value="${cam.range}">
        <br><label>‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏†‡∏≤‡∏û (FOV ‡∏≠‡∏á‡∏®‡∏≤): </label> <input type="range" min="1" max="359" id="fld-fov" value="${cam.fov}">
        <br>
        <br>
        <div style="text-align: center; margin-top: 20px; padding: 15px; background: #fff3cd; border: 2px solid #ffeaa7; border-radius: 8px;">
            <button onclick="clearCurrentCamera()" style="background: linear-gradient(45deg, #dc3545, #c82333); color: white; border: none; padding: 12px 25px; border-radius: 8px; cursor: pointer; font-size: 16px; font-weight: bold; box-shadow: 0 4px 8px rgba(0,0,0,0.3); transition: all 0.3s ease; width: 100%;" title="‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á" onmouseover="this.style.transform='scale(1.02)'" onmouseout="this.style.transform='scale(1)'">
                üö™ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
            </button>
            <p style="margin-top: 10px; font-size: 12px; color: #856404;">‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô</p>
        </div>
    `;

    document.getElementById('fld-angle').addEventListener('input', (e) => { cam.angle = parseFloat(e.target.value); renderCam(cam) });
    const typeSel = document.getElementById('fld-type');
    if (typeSel) typeSel.addEventListener('change', (e) => { cam.type = e.target.value; renderCam(cam); });
    document.getElementById('fld-range').addEventListener('input', (e) => { cam.range = parseFloat(e.target.value); renderCam(cam) });
    document.getElementById('fld-fov').addEventListener('input', (e) => { cam.fov = parseFloat(e.target.value); renderCam(cam) });

    currentCam = cam;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
function clearCurrentCamera() {
    currentCam = null;
    toolsEl.innerHTML = `
        <div style="text-align: center; padding: 20px; color: #666;">
            <h4 style="color: #495057; margin-bottom: 15px;">üé• ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á</h4>
            <p style="margin-bottom: 20px;">‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á</p>
            <div style="display: flex; flex-direction: column; gap: 10px;">
                <button onclick="addBulletCameraMode()" style="background: linear-gradient(45deg, #ffc107, #e0a800); color: #333; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-weight: bold; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.02)'" onmouseout="this.style.transform='scale(1)'">
                    üìπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ö‡∏π‡∏•‡πÄ‡∏•‡πá‡∏ï
                </button>
                <button onclick="addDomeCameraMode()" style="background: linear-gradient(45deg, #007bff, #0056b3); color: white; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-weight: bold; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.02)'" onmouseout="this.style.transform='scale(1)'">
                    üîµ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏°
                </button>
                <button onclick="addPTZCameraMode()" style="background: linear-gradient(45deg, #dc3545, #c82333); color: white; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-weight: bold; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.02)'" onmouseout="this.style.transform='scale(1)'">
                    üî¥ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á PTZ
                </button>
            </div>
            <hr style="margin: 20px 0; border: 1px solid #dee2e6;">
            <h4 style="color: #495057; margin-bottom: 15px;">üèóÔ∏è ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ</h4>
            <div style="display: flex; flex-direction: column; gap: 10px;">
                <button onclick="addRackMode()" style="background: linear-gradient(45deg, #28a745, #1e7e34); color: white; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-weight: bold; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.02)'" onmouseout="this.style.transform='scale(1)'">
                    üóÑÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏π‡πâ Rack
                </button>
                <button onclick="addPoleMode()" style="background: linear-gradient(45deg, #6f42c1, #5a2d91); color: white; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-weight: bold; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.02)'" onmouseout="this.style.transform='scale(1)'">
                    üèóÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á
                </button>
            </div>
        </div>
    `;
    showNotification('‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß - ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà', 'info');
}

function renderCam(cam) {
    var coords = buildPolyCoords(cam.position, cam.angle, cam.fov, cam.range);
    cam.ndPolygon.setLatLngs(coords);
    // update rotation handle position if exists
    try {
        if (cam.ndHandle) {
            var handleDist = 5;
            cam.ndHandle.setLatLng(L.GeometryUtil.destination(cam.position, cam.angle, handleDist));
        }
    } catch(_) {}
    // update icon marker
    try {
        if (cam.ndMarker) {
            cam.ndMarker.setLatLng(cam.position);
            cam.ndMarker.setIcon(makeCamIcon(cam));
        }
    } catch(_) {}
}

// Build a rotating SVG icon for the camera by type and angle
function makeCamIcon(cam) {
    var angle = cam.angle || 0;
    var type = cam.type || 'BULLET';
    var svg = camIconSvg(type);
    var html = `<div class="cam-icon" style="width:28px;height:28px;transform: rotate(${angle}deg); transform-origin: 50% 50%;">${svg}</div>`;
    return L.divIcon({
        className: 'cam-icon-wrapper',
        html: html,
        iconSize: [28, 28],
        iconAnchor: [14, 14]
    });
}

function camIconSvg(type) {
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
    if (type === 'DOME') {
        return `
        <svg viewBox="0 0 64 64" width="28" height="28">
            <circle cx="32" cy="28" r="12" fill="#007bff"/>
            <circle cx="32" cy="28" r="8" fill="#ffffff"/>
            <circle cx="32" cy="28" r="4" fill="#007bff"/>
            <rect x="16" y="40" width="32" height="6" rx="3" fill="#6c757d"/>
            <polygon points="32,6 28,16 36,16" fill="#28a745"/>
        </svg>`;
    } else if (type === 'PTZ') {
        return `
        <svg viewBox="0 0 64 64" width="28" height="28">
            <circle cx="32" cy="28" r="14" fill="#dc3545"/>
            <circle cx="32" cy="28" r="10" fill="#ffffff"/>
            <circle cx="32" cy="28" r="6" fill="#dc3545"/>
            <circle cx="32" cy="28" r="2" fill="#ffffff"/>
            <rect x="24" y="42" width="16" height="6" rx="3" fill="#6c757d"/>
            <polygon points="32,6 28,16 36,16" fill="#28a745"/>
        </svg>`;
    } else { // BULLET
        return `
        <svg viewBox="0 0 64 64" width="28" height="28">
            <rect x="16" y="20" width="32" height="16" rx="6" fill="#ffc107"/>
            <rect x="6" y="24" width="14" height="8" rx="4" fill="#6c757d"/>
            <circle cx="48" cy="28" r="4" fill="#343a40"/>
            <polygon points="32,6 28,16 36,16" fill="#28a745"/>
        </svg>`;
    }
}


function startMapCoords() {
    var urlParams = new URLSearchParams(window.location.search);
    var lat = urlParams.get('lat');
    var lng = urlParams.get('lng');
    var z = urlParams.get('z');
    if (lat && lng && z) {
        return [lat, lng, z];
    } else {
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
        return [13.7563, 100.5018, 12];
    }
}

function setUrlCoords(map) {
    var urlParams = new URLSearchParams(location.search);
    urlParams.set('lat', map.getCenter().lat);
    urlParams.set('lng', map.getCenter().lng);
    urlParams.set('z', map.getZoom());
    var newUrl = location.protocol + "//" + location.host + location.pathname + '?' + urlParams.toString();
    if (history && history.replaceState) {
        history.replaceState(null, '', newUrl);
    }
}
function calculateCosts() {
    // 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏™‡∏≤‡∏¢
    const utpPrice = parseFloat(document.getElementById('utpPrice')?.value) || 15;
    const fiberPrice = parseFloat(document.getElementById('fiberPrice')?.value) || 25;
    const laborPriceUtp = parseFloat(document.getElementById('laborPriceUtp')?.value) || 30;
    const laborPriceFiber = parseFloat(document.getElementById('laborPriceFiber')?.value) || 35;
    const pvcPriceUtp = parseFloat(document.getElementById('pvcPriceUtp')?.value) || 0;
    const pvcPriceFiber = parseFloat(document.getElementById('pvcPriceFiber')?.value) || 0;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏Ç‡∏≠‡∏á rackLinks ‡∏î‡πâ‡∏ß‡∏¢
    let utpMeters = 0;
    let fiberMeters = 0;
    let totalMeters = 0;

    // ‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
    cableLines.forEach(line => {
        const latlngs = line.getLatLngs();
        for (let i = 1; i < latlngs.length; i++) {
            const seg = map.distance(latlngs[i - 1], latlngs[i]);
            totalMeters += seg;
            if (line.cableType === 'FIBER') fiberMeters += seg; else utpMeters += seg;
        }
    });

    // ‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Rack
    (rackLinks || []).forEach(link => {
        const latlngs = link.line.getLatLngs();
        for (let i = 1; i < latlngs.length; i++) {
            const seg = map.distance(latlngs[i - 1], latlngs[i]);
            totalMeters += seg;
            if (link.cableType === 'FIBER') fiberMeters += seg; else utpMeters += seg;
        }
    });

    totalDistance = totalMeters / 1000.0; // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
    
    // ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏™‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î
    const cableMaterialCost = (utpMeters * utpPrice) + (fiberMeters * fiberPrice);
    // ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏Ñ‡∏¥‡∏î‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏≤‡∏¢
    const cableLaborCost = (utpMeters * laborPriceUtp) + (fiberMeters * laborPriceFiber);
    // ‡∏Ñ‡πà‡∏≤‡∏ó‡πà‡∏≠ PVC ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏≤‡∏¢
    const pvcCostUtp = utpMeters * pvcPriceUtp;
    const pvcCostFiber = fiberMeters * pvcPriceFiber;
    const pvcTotalCost = pvcCostUtp + pvcCostFiber;
    
    // 2. ‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡πÄ‡∏î‡∏¥‡∏°)
    var equipmentCost = 0;
    var rackLaborCost = 0;
    var rackSize = document.getElementById('rackSize').value;
    equipmentCost += rackPrices[parseInt(rackSize)] || 0;
    var switchQty = parseInt(document.getElementById('switchQty').value) || 0;
    var nvrQty = parseInt(document.getElementById('nvrQty').value) || 0;
    var upsQty = parseInt(document.getElementById('upsQty').value) || 0;
    equipmentCost += switchQty * 4500;
    equipmentCost += nvrQty * 9500;
    equipmentCost += upsQty * 12500;
    rackLaborCost = parseInt(document.getElementById('rackInstallation').value) || 5000;

    // 3. ‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏≤
    var cameraCost = 0;
    var poleCost = 0;
    var cameraInstallationCost = 0;
    
    cameras.forEach(camera => {
        // ‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á
        cameraCost += camera.price || 0;
        
        // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏≤
        poleCost += camera.polePrice || 0;
        
        // ‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 20% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á)
        cameraInstallationCost += (camera.price * 0.2) || 0;
    });
    
    equipmentCost += cameraCost + poleCost;
    rackLaborCost += cameraInstallationCost;
    
    var totalCost = cableMaterialCost + pvcTotalCost + cableLaborCost + equipmentCost + rackLaborCost;
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
    document.getElementById('totalDistance').textContent = totalDistance.toFixed(3);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á
    const totalCameras = cameras.length;
    const fixedCameras = cameras.filter(c => c.type === 'fixed').length;
    const ptzCameras = cameras.filter(c => c.type === 'ptz').length;
    const totalPoles = cameras.filter(c => c.type === 'pole').length;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    let totalHeight = 0;
    let totalRange = 0;
    let totalCoverageArea = 0;
    let validCameras = 0;
    
    cameras.forEach(camera => {
        if (camera.poleHeight && camera.cameraHeight) {
            totalHeight += camera.poleHeight + camera.cameraHeight;
            totalRange += camera.range || 0;
            totalCoverageArea += calculateCoverageArea(camera);
            validCameras++;
        }
    });
    
    const averageHeight = validCameras > 0 ? (totalHeight / validCameras).toFixed(1) : 0;
    const averageRange = validCameras > 0 ? (totalRange / validCameras).toFixed(1) : 0;
    
    document.getElementById('totalCameras').textContent = totalCameras;
    document.getElementById('fixedCameras').textContent = fixedCameras;
    document.getElementById('ptzCameras').textContent = ptzCameras;
    document.getElementById('totalPoles').textContent = totalPoles;
    document.getElementById('totalCameraCost').textContent = cameraCost.toLocaleString();
    document.getElementById('totalPoleCost').textContent = poleCost.toLocaleString();
    document.getElementById('cameraInstallationCost').textContent = Math.round(cameraInstallationCost).toLocaleString();
    document.getElementById('averageHeight').textContent = averageHeight;
    document.getElementById('averageRange').textContent = averageRange;
    document.getElementById('totalCoverageArea').textContent = totalCoverageArea.toLocaleString();
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏≤‡∏¢‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î (‡∏Å‡∏°.)
    const utpKm = (utpMeters / 1000).toFixed(3);
    const fiberKm = (fiberMeters / 1000).toFixed(3);
    const utpEl = document.getElementById('utpLengthKm');
    const fiberEl = document.getElementById('fiberLengthKm');
    if (utpEl) utpEl.textContent = utpKm;
    if (fiberEl) fiberEl.textContent = fiberKm;
    document.getElementById('materialCost').textContent = Math.round(cableMaterialCost).toLocaleString();
    const pvcCostEl = document.getElementById('pvcCost');
    if (pvcCostEl) pvcCostEl.textContent = Math.round(pvcTotalCost).toLocaleString();
    document.getElementById('laborCost').textContent = Math.round(cableLaborCost).toLocaleString();
    document.getElementById('equipmentCost').textContent = equipmentCost.toLocaleString();
    document.getElementById('rackLaborCost').textContent = rackLaborCost.toLocaleString();
    document.getElementById('totalCost').textContent = Math.round(totalCost).toLocaleString();
    
    return {
        cableMaterialCost,
        pvcTotalCost,
        cableLaborCost,
        equipmentCost,
        rackLaborCost,
        totalCost,
        utpMeters,
        fiberMeters
    };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≤‡∏¢ UTP/Fiber ‡πÅ‡∏¢‡∏Å‡∏ä‡∏ô‡∏¥‡∏î ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á + ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
function generateQuote() {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
    const costs = calculateCosts();
    const utpPrice = parseFloat(document.getElementById('utpPrice')?.value) || 15;
    const fiberPrice = parseFloat(document.getElementById('fiberPrice')?.value) || 25;
    const laborPriceUtp = parseFloat(document.getElementById('laborPriceUtp')?.value) || 30;
    const laborPriceFiber = parseFloat(document.getElementById('laborPriceFiber')?.value) || 35;
    const pvcPriceUtp = parseFloat(document.getElementById('pvcPriceUtp')?.value) || 0;
    const pvcPriceFiber = parseFloat(document.getElementById('pvcPriceFiber')?.value) || 0;
    const rackSize = parseInt(document.getElementById('rackSize')?.value) || 9;
    const switchQty = parseInt(document.getElementById('switchQty')?.value) || 0;
    const nvrQty = parseInt(document.getElementById('nvrQty')?.value) || 0;
    const upsQty = parseInt(document.getElementById('upsQty')?.value) || 0;
    const rackInstallation = parseInt(document.getElementById('rackInstallation')?.value) || 0;

    // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö calculateCosts
    const rackPrice = rackPrices[rackSize] || 0;
    const switchUnit = 4500;
    const nvrUnit = 9500;
    const upsUnit = 12500;

    // ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
    const utpMeters = costs.utpMeters || 0;
    const fiberMeters = costs.fiberMeters || 0;
    const totalMeters = utpMeters + fiberMeters;

    const utpTotal = Math.round(utpMeters * utpPrice);
    const fiberTotal = Math.round(fiberMeters * fiberPrice);
    const utpLaborTotal = Math.round(utpMeters * laborPriceUtp);
    const fiberLaborTotal = Math.round(fiberMeters * laborPriceFiber);
    const utpPvcTotal = Math.round(utpMeters * pvcPriceUtp);
    const fiberPvcTotal = Math.round(fiberMeters * pvcPriceFiber);
    const switchTotal = switchQty * switchUnit;
    const nvrTotal = nvrQty * nvrUnit;
    const upsTotal = upsQty * upsUnit;

    const subTotal = utpTotal + fiberTotal + utpPvcTotal + fiberPvcTotal + utpLaborTotal + fiberLaborTotal + rackPrice + switchTotal + nvrTotal + upsTotal + rackInstallation;
    const vat = Math.round(subTotal * 0.07);
    const grandTotal = Math.round(subTotal + vat);

    const quoteContent = `
        <div style="max-width: 800px; margin: 0 auto; padding: 20px; font-family: 'TH Sarabun New', Arial, sans-serif;">
            <div style="text-align: center; margin-bottom: 20px;">
                <h1 style="margin-bottom: 5px;">‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö CCTV</h1>
                <p style="margin: 5px 0;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${new Date().toLocaleDateString('th-TH')}</p>
            </div>

            <h3>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á</h3>
            <ul>
                <li>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á: ${cameras.length} ‡∏ï‡∏±‡∏ß</li>
                <li>‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏≤‡∏¢ UTP: ${(utpMeters/1000).toFixed(3)} ‡∏Å‡∏°.</li>
                <li>‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏≤‡∏¢ Fiber: ${(fiberMeters/1000).toFixed(3)} ‡∏Å‡∏°.</li>
                <li>‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏π‡πâ Rack: ${rackSize} U</li>
            </ul>

            <h3>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢</h3>
            <table border="1" cellpadding="8" style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
                <tr style="background-color: #f5f5f5;">
                    <th width="50%">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>
                    <th width="15%" style="text-align: center;">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                    <th width="15%" style="text-align: right;">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
                    <th width="20%" style="text-align: right;">‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)</th>
                </tr>
                <tr>
                    <td>‡∏Ñ‡πà‡∏≤‡∏™‡∏≤‡∏¢ UTP</td>
                    <td style="text-align: center;">${Math.round(utpMeters).toLocaleString()} ‡πÄ‡∏°‡∏ï‡∏£</td>
                    <td style="text-align: right;">${utpPrice.toLocaleString()}</td>
                    <td style="text-align: right;">${utpTotal.toLocaleString()}</td>
                </tr>
                <tr>
                    <td>‡∏Ñ‡πà‡∏≤‡∏™‡∏≤‡∏¢ Fiber</td>
                    <td style="text-align: center;">${Math.round(fiberMeters).toLocaleString()} ‡πÄ‡∏°‡∏ï‡∏£</td>
                    <td style="text-align: right;">${fiberPrice.toLocaleString()}</td>
                    <td style="text-align: right;">${fiberTotal.toLocaleString()}</td>
                </tr>
                <tr>
                    <td>‡∏Ñ‡πà‡∏≤‡∏ó‡πà‡∏≠ PVC ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UTP</td>
                    <td style="text-align: center;">${Math.round(utpMeters).toLocaleString()} ‡πÄ‡∏°‡∏ï‡∏£</td>
                    <td style="text-align: right;">${pvcPriceUtp.toLocaleString()}</td>
                    <td style="text-align: right;">${utpPvcTotal.toLocaleString()}</td>
                </tr>
                <tr>
                    <td>‡∏Ñ‡πà‡∏≤‡∏ó‡πà‡∏≠ PVC ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Fiber</td>
                    <td style="text-align: center;">${Math.round(fiberMeters).toLocaleString()} ‡πÄ‡∏°‡∏ï‡∏£</td>
                    <td style="text-align: right;">${pvcPriceFiber.toLocaleString()}</td>
                    <td style="text-align: right;">${fiberPvcTotal.toLocaleString()}</td>
                </tr>
                <tr>
                    <td>‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏™‡∏≤‡∏¢ UTP</td>
                    <td style="text-align: center;">${Math.round(utpMeters).toLocaleString()} ‡πÄ‡∏°‡∏ï‡∏£</td>
                    <td style="text-align: right;">${laborPriceUtp.toLocaleString()}</td>
                    <td style="text-align: right;">${utpLaborTotal.toLocaleString()}</td>
                </tr>
                <tr>
                    <td>‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏™‡∏≤‡∏¢ Fiber</td>
                    <td style="text-align: center;">${Math.round(fiberMeters).toLocaleString()} ‡πÄ‡∏°‡∏ï‡∏£</td>
                    <td style="text-align: right;">${laborPriceFiber.toLocaleString()}</td>
                    <td style="text-align: right;">${fiberLaborTotal.toLocaleString()}</td>
                </tr>
                <tr>
                    <td>‡∏ï‡∏π‡πâ Rack ‡∏Ç‡∏ô‡∏≤‡∏î ${rackSize}U</td>
                    <td style="text-align: center;">1</td>
                    <td style="text-align: right;">${rackPrice.toLocaleString()}</td>
                    <td style="text-align: right;">${rackPrice.toLocaleString()}</td>
                </tr>
                <tr>
                    <td>‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå PoE</td>
                    <td style="text-align: center;">${switchQty}</td>
                    <td style="text-align: right;">${switchUnit.toLocaleString()}</td>
                    <td style="text-align: right;">${switchTotal.toLocaleString()}</td>
                </tr>
                <tr>
                    <td>‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û (NVR)</td>
                    <td style="text-align: center;">${nvrQty}</td>
                    <td style="text-align: right;">${nvrUnit.toLocaleString()}</td>
                    <td style="text-align: right;">${nvrTotal.toLocaleString()}</td>
                </tr>
                <tr>
                    <td>‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü (UPS)</td>
                    <td style="text-align: center;">${upsQty}</td>
                    <td style="text-align: right;">${upsUnit.toLocaleString()}</td>
                    <td style="text-align: right;">${upsTotal.toLocaleString()}</td>
                </tr>
                <tr>
                    <td>‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏π‡πâ Rack ‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</td>
                    <td style="text-align: center;">1</td>
                    <td style="text-align: right;">${rackInstallation.toLocaleString()}</td>
                    <td style="text-align: right;">${rackInstallation.toLocaleString()}</td>
                </tr>
                <tr style="font-weight: bold; background-color: #f9f9f9;">
                    <td colspan="3" style="text-align: right; padding-right: 15px;">‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</td>
                    <td style="text-align: right;">${subTotal.toLocaleString()}</td>
                </tr>
                <tr style="font-weight: bold; background-color: #f0f0f0;">
                    <td colspan="3" style="text-align: right; padding-right: 15px;">‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° 7%</td>
                    <td style="text-align: right;">${vat.toLocaleString()}</td>
                </tr>
                <tr style="font-weight: bold; font-size: 1.1em; background-color: #e9e9e9;">
                    <td colspan="3" style="text-align: right; padding-right: 15px;">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô</td>
                    <td style="text-align: right;">${grandTotal.toLocaleString()}</td>
                </tr>
            </table>
        </div>
    `;

    const w = window.open('', '_blank');
    w.document.write(`<!DOCTYPE html><html><head><meta charset="UTF-8"><title>‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö CCTV</title>
        <style>
            @page { size: A4; margin: 1cm; }
            body { font-family: 'TH Sarabun New', 'Sarabun', Arial, sans-serif; margin: 0; padding: 0; color: #333; }
            .container { max-width: 21cm; margin: 0 auto; padding: 1cm; }
            @media print { .no-print { display: none; } }
        </style>
        <link href="https://fonts.googleapis.com/css2?family=Sarabun:wght@300;400;500;700&display=swap" rel="stylesheet">
    </head><body><div class="container">${quoteContent}</div>
    <div class="no-print" style="text-align:center; margin: 20px 0 50px;">
        <button onclick="window.print()" style="padding:10px 25px; background:#4CAF50; color:#fff; border:none; border-radius:4px;">‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤</button>
        <button onclick="window.close()" style="padding:10px 25px; margin-left: 10px; background:#f44336; color:#fff; border:none; border-radius:4px;">‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á</button>
    </div></body></html>`);
    w.document.close();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏¢‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
function addCableLine(fromLatLng, toLatLng) {
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏≤‡∏¢‡∏à‡∏≤‡∏Å UI (UTP/FIBER) ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î
    const typeEl = document.getElementById('cableType');
    const cableType = typeEl ? typeEl.value : 'UTP';
    const color = cableType === 'FIBER' ? '#007bff' : '#dc3545';
    const line = L.polyline([fromLatLng, toLatLng], {color, weight: 3});
    line.cableType = cableType;
    line.addTo(map);
    cableLines.push(line);
    calculateCosts();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function removeAllCableLines() {
    cableLines.forEach(line => map.removeLayer(line));
    cableLines = [];
    calculateCosts();
}

function init() {
    // OpenStreetMap
    var osm = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    });

    // OpenStreetMap layers only (no Google Maps required)
    var osm = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    });

    // Satellite layer using OpenStreetMap
    var sat = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.esri.com/">Esri</a>'
    });

    var coords = startMapCoords();
    map = L.map('map', {
        center: [coords[0], coords[1]],
        zoom: coords[2],
        layers: [osm]
    });

    // Helper: setup OpenStreetMap Geocoder on #placesSearch
    function setupPlacesAutocomplete() {
        try {
            const input = document.getElementById('placesSearch');
            if (!input) return false;
            
            // ‡πÉ‡∏ä‡πâ Leaflet Control Geocoder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö autocomplete
            const geocoder = L.Control.Geocoder.nominatim({
                geocodingQueryParams: {
                    countrycodes: 'th', // ‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
                    limit: 5
                }
            });
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á autocomplete dropdown
            let autocompleteList = null;
            
            input.addEventListener('input', function() {
                const query = this.value.trim();
                if (query.length < 2) {
                    if (autocompleteList) {
                        autocompleteList.remove();
                        autocompleteList = null;
                    }
                    return;
                }
                
                geocoder.geocode(query, function(results) {
                    if (autocompleteList) {
                        autocompleteList.remove();
                    }
                    
                    if (results && results.length > 0) {
                        autocompleteList = L.DomUtil.create('div', 'autocomplete-list');
                        autocompleteList.style.cssText = `
                            position: absolute;
                            top: 100%;
                            left: 0;
                            right: 0;
                            background: white;
                            border: 1px solid #ccc;
                            border-top: none;
                            max-height: 200px;
                            overflow-y: auto;
                            z-index: 1000;
                        `;
                        
                        results.forEach(result => {
                            const item = L.DomUtil.create('div', 'autocomplete-item', autocompleteList);
                            item.textContent = result.name || result.html || '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤';
                            item.style.cssText = 'padding: 8px; cursor: pointer; border-bottom: 1px solid #eee;';
                            
                            item.addEventListener('click', function() {
                                input.value = result.name || result.html || '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤';
                                autocompleteList.remove();
                                autocompleteList = null;
                                
                                if (result.center) {
                                    map.setView(result.center, 17);
                                    L.marker(result.center).addTo(map)
                                        .bindPopup(result.name || result.html || '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤')
                    .openPopup();
                                }
                            });
                            
                            item.addEventListener('mouseenter', function() {
                                this.style.backgroundColor = '#f0f0f0';
                            });
                            
                            item.addEventListener('mouseleave', function() {
                                this.style.backgroundColor = 'white';
                            });
                        });
                        
                        input.parentNode.style.position = 'relative';
                        input.parentNode.appendChild(autocompleteList);
                    }
                });
            });
            
            // ‡∏ã‡πà‡∏≠‡∏ô autocomplete ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô
            document.addEventListener('click', function(e) {
                if (autocompleteList && !input.contains(e.target) && !autocompleteList.contains(e.target)) {
                    autocompleteList.remove();
                    autocompleteList = null;
                }
            });
            
            return true;
        } catch (err) {
            console.warn('OpenStreetMap Geocoder init failed:', err);
            return false;
        }
    }

    // Helper: perform search by query via OpenStreetMap Geocoder
    function performSearchQuery(query) {
        const q = (query || '').trim();
        if (!q) {
            showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤', 'warning');
                                return;
                            }
        
        showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...', 'info');
        
        // ‡πÉ‡∏ä‡πâ OpenStreetMap Nominatim API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        const searchUrl = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(q)}&countrycodes=th&limit=1&addressdetails=1`;
        
        fetch(searchUrl)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data && data.length > 0) {
                    const result = data[0];
                    const lat = parseFloat(result.lat);
                    const lon = parseFloat(result.lon);
                    
                    if (lat && lon) {
                        const center = [lat, lon];
                        map.setView(center, 17);
                        
                        // ‡∏•‡∏ö marker ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                        if (window.searchMarker) {
                            map.removeLayer(window.searchMarker);
                        }
                        
                        // ‡∏™‡∏£‡πâ‡∏≤‡∏á marker ‡πÉ‡∏´‡∏°‡πà
                        window.searchMarker = L.marker(center).addTo(map);
                        
                        // ‡∏™‡∏£‡πâ‡∏≤‡∏á popup content
                        let popupContent = `<strong>${result.display_name}</strong>`;
                        if (result.address) {
                            popupContent += '<br><small>';
                            if (result.address.road) popupContent += `‡∏ñ‡∏ô‡∏ô: ${result.address.road}<br>`;
                            if (result.address.suburb) popupContent += `‡πÅ‡∏Ç‡∏ß‡∏á: ${result.address.suburb}<br>`;
                            if (result.address.district) popupContent += `‡πÄ‡∏Ç‡∏ï: ${result.address.district}<br>`;
                            if (result.address.city) popupContent += `‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: ${result.address.city}`;
                            popupContent += '</small>';
                        }
                        
                        window.searchMarker.bindPopup(popupContent).openPopup();
                        showNotification(`‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${result.display_name}`, 'success');
                    } else {
                        showNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤', 'error');
                    }
                } else {
                    showNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤', 'error');
                }
            })
            .catch(error => {
                console.error('Search error:', error);
                showNotification('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'error');
            });
    }



    // Wire up search button and Enter key
    function wireSearchHandlers() {
        const input = document.getElementById('placesSearch');
        const btn = document.getElementById('placesSearchBtn');
        if (btn) {
            btn.addEventListener('click', () => performSearchQuery(input ? input.value : ''));
        }
        if (input) {
            input.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    performSearchQuery(input.value);
                }
            });
        }
    }

    // Setup OpenStreetMap Geocoder
    const placesReady = setupPlacesAutocomplete();
    wireSearchHandlers();
    
    // Add geocoder control to map
        try {
            if (L.Control && L.Control.Geocoder) {
                const geocoder = L.Control.geocoder({
                    defaultMarkGeocode: false,
                placeholder: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà...',
                geocoder: L.Control.Geocoder.nominatim({
                    geocodingQueryParams: {
                        countrycodes: 'th'
                    }
                })
                })
                .on('markgeocode', function(e) {
                    const center = e.geocode.center;
                    const name = e.geocode.name || '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤';
                    map.setView(center, 17);
                    L.marker(center).addTo(map).bindPopup(name).openPopup();
                })
                .addTo(map);
            }
        } catch (err) {
            console.warn('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Geocoder ‡πÑ‡∏î‡πâ:', err);
    }

    const baseLayers = {
        "‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô (OpenStreetMap)": osm,
        "‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢‡∏î‡∏≤‡∏ß‡πÄ‡∏ó‡∏µ‡∏¢‡∏°": sat
    };
    L.control.layers(baseLayers, {}).addTo(map);

    // Global mouse event handlers for overlay dragging
    map.on('mousemove', (e) => {
        if (!currentOverlay) return;
        
        // Center dragging
        if (draggingCenter) {
            currentOverlay.center = e.latlng;
            updateOverlayGeometry(currentOverlay);
            return;
        }
        
        // Body dragging
        if (draggingBody && dragStartData) {
            const currMouseLP = map.latLngToLayerPoint(e.latlng);
            const dx = currMouseLP.x - dragStartData.mousePos.x;
            const dy = currMouseLP.y - dragStartData.mousePos.y;
            const newCenterLP = L.point(
                map.latLngToLayerPoint(dragStartData.center).x + dx,
                map.latLngToLayerPoint(dragStartData.center).y + dy
            );
            currentOverlay.center = map.layerPointToLatLng(newCenterLP);
            updateOverlayGeometry(currentOverlay);
            return;
        }
        
        // Corner resizing
        if (draggingCornerIdx >= 0 && dragStartData) {
            const bearing = L.GeometryUtil.bearing(currentOverlay.center, e.latlng);
            const dist = map.distance(currentOverlay.center, e.latlng);
            const diff = (bearing - dragStartData.angle) * Math.PI / 180.0;
            let x = dist * Math.cos(diff);
            let y = dist * Math.sin(diff);
            currentOverlay.width = Math.max(1, Math.abs(x) * 2);
            currentOverlay.height = Math.max(1, Math.abs(y) * 2);
            updateOverlayGeometry(currentOverlay);
            return;
        }
        
        // Rotation
        if (dragStartData && dragStartData.startAngle !== undefined) {
            const bearing = L.GeometryUtil.bearing(currentOverlay.center, e.latlng);
            currentOverlay.angle = bearing;
            updateOverlayGeometry(currentOverlay);
            return;
        }
    });
    
    map.on('mouseup', () => {
        draggingCenter = false;
        draggingBody = false;
        draggingCornerIdx = -1;
        dragStartData = null;
    });

    map.on('contextmenu', (e) => {
        // ‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏° Rack ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
        if (currentTool === 'addRack' || currentTool === 'drawArea') return;
        addCamera(e.latlng);
        if (cameras.length > 1) {
            const lastCam = cameras[cameras.length - 2];
            addCableLine(lastCam.position, e.latlng);
        }
    });
    
    map.on('moveend', (e) => setUrlCoords(map));

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    L.Control.RemoveCablesControl = L.Control.extend({
        onAdd: function(map) {
            var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control');
            container.innerHTML = '<a href="#" style="padding: 6px 10px; display: block;" title="‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î">‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</a>';
            container.onclick = function(e) {
                e.preventDefault();
                removeAllCableLines();
            };
            return container;
        }
    });
    
    new L.Control.RemoveCablesControl({ position: 'topleft' }).addTo(map);
    
    // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Google Drive
let gapiInited = false;
let gisInited = false;
let tokenClient;
let accessToken = '';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Google API
function gapiLoaded() {
    gapi.load('client', initializeGapiClient);
}

async function initializeGapiClient() {
    await gapi.client.init({
        apiKey: 'YOUR_API_KEY',
        discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'],
    });
    gapiInited = true;
    maybeEnableButtons();
}

function gisLoaded() {
    tokenClient = google.accounts.oauth2.initTokenClient({
        client_id: 'YOUR_CLIENT_ID.apps.googleusercontent.com',
        scope: 'https://www.googleapis.com/auth/drive.file',
        callback: (tokenResponse) => {
            accessToken = tokenResponse.access_token;
            document.getElementById('saveToDrive').style.display = 'inline-block';
            document.getElementById('loadFromDrive').style.display = 'inline-block';
        },
    });
    gisInited = true;
    maybeEnableButtons();
}

function maybeEnableButtons() {
    if (gapiInited && gisInited) {
        document.querySelector('.g_id_signin').style.display = 'inline-block';
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
function handleCredentialResponse(response) {
    if (response.credential) {
        tokenClient.requestAccessToken();
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive
async function saveToDrive() {
    if (!accessToken) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Google ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
        return;
    }

    // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const projectData = {
        cameras: cameras.map(cam => ({
            latlng: cam.getLatLng(),
            type: cam.options.icon.options.iconUrl.includes('2103633') ? 'dome' : 
                  cam.options.icon.options.iconUrl.includes('2103653') ? 'bullet' : 'ptz'
        })),
        cableLines: cableLines.map(line => ({
            latlngs: line.getLatLngs(),
            cableType: line.cableType || 'UTP'
        })),
        racks: racks.map(r => ({ id: r.id, latlng: r.marker.getLatLng() })),
        rackLinks: (rackLinks || []).map(l => ({ fromId: l.fromId, toId: l.toId, cableType: l.cableType })),
        settings: {
            utpPrice: document.getElementById('utpPrice').value,
            fiberPrice: document.getElementById('fiberPrice').value,
            laborPriceUtp: document.getElementById('laborPriceUtp').value,
            laborPriceFiber: document.getElementById('laborPriceFiber').value,
            pvcPriceUtp: document.getElementById('pvcPriceUtp') ? document.getElementById('pvcPriceUtp').value : 0,
            pvcPriceFiber: document.getElementById('pvcPriceFiber') ? document.getElementById('pvcPriceFiber').value : 0,
            rackSize: document.getElementById('rackSize').value,
            switchQty: document.getElementById('switchQty').value,
            nvrQty: document.getElementById('nvrQty').value,
            upsQty: document.getElementById('upsQty').value,
            rackInstallation: document.getElementById('rackInstallation').value
        },
        timestamp: new Date().toISOString()
    };

    const fileName = `CCTV_Project_${new Date().toISOString().split('T')[0]}.json`;
    const fileContent = JSON.stringify(projectData, null, 2);
    const file = new Blob([fileContent], { type: 'application/json' });
    
    const metadata = {
        name: fileName,
        mimeType: 'application/json',
        parents: ['root']
    };

    const form = new FormData();
    form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));
    form.append('file', file);

    try {
        const response = await fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart', {
            method: 'POST',
            headers: new Headers({ 'Authorization': 'Bearer ' + accessToken }),
            body: form,
        });
        
        const result = await response.json();
        if (result.error) {
            throw new Error(result.error.message);
        }
        
        alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô Google Drive ‡πÅ‡∏•‡πâ‡∏ß');
    } catch (error) {
        console.error('Error saving to Google Drive:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + error.message);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Drive
async function loadFromDrive() {
    if (!accessToken) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Google ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
        return;
    }

    try {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô Google Drive
        const response = await gapi.client.drive.files.list({
            q: "mimeType='application/json' and name contains 'CCTV_Project'",
            fields: 'files(id, name, modifiedTime)',
            orderBy: 'modifiedTime desc',
            pageSize: 10
        });

        const files = response.result.files;
        if (!files || files.length === 0) {
            alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ CCTV ‡πÉ‡∏ô Google Drive');
            return;
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        const fileList = files.map(file => 
            `<div style="padding: 5px; border-bottom: 1px solid #eee; cursor: pointer;" 
                  onclick="loadProjectFile('${file.id}')">
                ${file.name}<br>
                <small>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${new Date(file.modifiedTime).toLocaleString()}</small>
            </div>`
        ).join('');

        document.getElementById('analysisResults').innerHTML = `
            <h4>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£</h4>
            <div style="max-height: 300px; overflow-y: auto;">
                ${fileList}
            </div>
        `;
    } catch (error) {
        console.error('Error loading files from Google Drive:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå: ' + error.message);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
async function loadProjectFile(fileId) {
    try {
        const response = await fetch(`https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`, {
            headers: {
                'Authorization': 'Bearer ' + accessToken
            }
        });
        
        if (!response.ok) {
            throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ');
        }
        
        const projectData = await response.json();
        
        // ‡∏•‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á ‡∏™‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞ Rack ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        cameras.forEach(cam => map.removeLayer(cam));
        cameras = [];
        cableLines.forEach(line => map.removeLayer(line));
        cableLines = [];
        (racks || []).forEach(r => { if (r.marker) map.removeLayer(r.marker); });
        racks = [];
        (rackLinks || []).forEach(l => { if (l.line) map.removeLayer(l.line); });
        rackLinks = [];
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        const cameraIcons = {
            'dome': 'https://cdn-icons-png.flaticon.com/512/2103/2103633.png',
            'bullet': 'https://cdn-icons-png.flaticon.com/512/2103/2103653.png',
            'ptz': 'https://cdn-icons-png.flaticon.com/512/2103/2103667.png'
        };
        
        projectData.cameras.forEach((cam, index) => {
            const cameraIcon = L.icon({
                iconUrl: cameraIcons[cam.type] || cameraIcons.dome,
                iconSize: [32, 32],
                iconAnchor: [16, 16],
                popupAnchor: [0, -16]
            });
            
            const camera = L.marker([cam.latlng.lat, cam.latlng.lng], {
                icon: cameraIcon,
                draggable: true
            }).addTo(map);
            
            camera.bindPopup(`‡∏Å‡∏•‡πâ‡∏≠‡∏á ${index+1}<br>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${cam.type}`);
            cameras.push(camera);
        });
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏• ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏≤‡∏¢
        (projectData.cableLines || []).forEach(line => {
            const cableType = line.cableType || 'UTP';
            const color = cableType === 'FIBER' ? '#007bff' : '#dc3545';
            const polyline = L.polyline(line.latlngs, {color, weight: 3});
            polyline.cableType = cableType;
            polyline.addTo(map);
            cableLines.push(polyline);
        });

        // ‡πÇ‡∏´‡∏•‡∏î Racks
        (projectData.racks || []).forEach(r => {
            const id = r.id;
            const name = r.name || r.id;
            const marker = L.marker([r.latlng.lat, r.latlng.lng], { title: id, draggable: true }).addTo(map).bindPopup('‡∏ï‡∏π‡πâ Rack: ' + name);
            marker.bindTooltip(name, { permanent: true, direction: 'top', offset: [0, -10], className: 'rack-label' });
            const rack = { id, name, marker };
            racks.push(rack);
            marker.on('drag', () => updateRackConnections(id));
            marker.on('dragend', () => { try { calculateCosts(); } catch(_){} });
            marker.on('dblclick', () => editRackName(rack));
            // ‡πÄ‡∏ï‡∏¥‡∏° dropdowns
            ['rackList','rackFrom','rackTo'].forEach(selId => {
                const sel = document.getElementById(selId);
                if (sel) {
                    const opt = document.createElement('option');
                    opt.value = id; opt.textContent = name;
                    sel.appendChild(opt);
                    if (!sel.value) sel.value = id;
                }
            });
        });
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Racks
        (projectData.rackLinks || []).forEach(lnk => {
            const fromRack = racks.find(rr => rr.id === lnk.fromId);
            const toRack = racks.find(rr => rr.id === lnk.toId);
            if (fromRack && toRack) {
                const color = (lnk.cableType === 'FIBER') ? '#0d6efd' : '#198754';
                const line = L.polyline([fromRack.marker.getLatLng(), toRack.marker.getLatLng()], { color, weight: 4, dashArray: '6,4' }).addTo(map);
                line.cableType = lnk.cableType || 'UTP';
                rackLinks.push({ fromId: lnk.fromId, toId: lnk.toId, line, cableType: line.cableType });
            }
        });
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        const settings = projectData.settings || {};
        document.getElementById('utpPrice').value = settings.utpPrice || 15;
        document.getElementById('fiberPrice').value = settings.fiberPrice || 25;
        document.getElementById('laborPriceUtp').value = settings.laborPriceUtp || 30;
        document.getElementById('laborPriceFiber').value = settings.laborPriceFiber || 35;
        if (document.getElementById('pvcPriceUtp')) document.getElementById('pvcPriceUtp').value = settings.pvcPriceUtp ?? 12;
        if (document.getElementById('pvcPriceFiber')) document.getElementById('pvcPriceFiber').value = settings.pvcPriceFiber ?? 18;
        document.getElementById('rackSize').value = settings.rackSize || 9;
        document.getElementById('switchQty').value = settings.switchQty || 1;
        document.getElementById('nvrQty').value = settings.nvrQty || 1;
        document.getElementById('upsQty').value = settings.upsQty || 1;
        document.getElementById('rackInstallation').value = settings.rackInstallation || 5000;
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
        calculateCosts();
        
        document.getElementById('analysisResults').innerHTML = '<p>‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</p>';
    } catch (error) {
        console.error('Error loading project file:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: ' + error.message);
    }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener('DOMContentLoaded', function() {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Google Drive
    document.getElementById('saveToDrive').addEventListener('click', saveToDrive);
    document.getElementById('loadFromDrive').addEventListener('click', loadFromDrive);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Google API
    gapiLoaded();
    gisLoaded();
});

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö UTP/Fiber)
    const inputs = ['utpPrice', 'fiberPrice', 'laborPriceUtp', 'laborPriceFiber', 'pvcPriceUtp', 'pvcPriceFiber', 'rackSize', 'switchQty', 'nvrQty', 'upsQty', 'rackInstallation'];
    inputs.forEach(id => {
        const el = document.getElementById(id);
        if (el) {
            el.addEventListener('input', calculateCosts);
            el.addEventListener('change', calculateCosts);
        }
    });
    
    // ‡∏£‡∏∞‡∏ö‡∏ö MCP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    document.getElementById('analyzeArea').addEventListener('click', function() {
        const resultsDiv = document.getElementById('analysisResults');
        resultsDiv.innerHTML = '<p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà... <span class="loading"></span></p>';
        
        // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI (‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö AI API)
        setTimeout(() => {
            const analysis = {
                areaSize: (Math.random() * 500 + 100).toFixed(2) + ' ‡∏ï‡∏£.‡∏°.',
                recommendedCameras: Math.floor(Math.random() * 5) + 2,
                riskAreas: ['‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏à‡∏∏‡∏î‡∏ö‡∏≠‡∏î', '‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ'],
                recommendations: [
                    '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤',
                    '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏ö‡∏≠‡∏î',
                    '‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö PTZ ‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏à‡∏≠‡∏î‡∏£‡∏ñ'
                ]
            };
            
            let html = `
                <h4>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà</h4>
                <p><strong>‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà:</strong> ${analysis.areaSize}</p>
                <p><strong>‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á:</strong> ${analysis.recommendedCameras} ‡∏ï‡∏±‡∏ß</p>
                
                <h5>‡∏à‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö:</h5>
                <ul>
                    ${analysis.riskAreas.map(area => `<li>${area}</li>`).join('')}
                </ul>
                
                <h5>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</h5>
                <ul>
                    ${analysis.recommendations.map(rec => `<li>${rec}</li>`).join('')}
                </ul>
                
                <div style="margin-top: 15px; padding: 10px; background: #f8f9fa; border-radius: 4px;">
                    <p><strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</p>
                </div>
            `;
            
            resultsDiv.innerHTML = html;
        }, 1500);
    });
    
    // ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    document.getElementById('suggestCameras').addEventListener('click', function() {
        const resultsDiv = document.getElementById('analysisResults');
        resultsDiv.innerHTML = '<p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á... <span class="loading"></span></p>';
        
        // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI (‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö AI API)
        setTimeout(() => {
            // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            cameras.forEach(cam => map.removeLayer(cam));
            cameras = [];
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
            const bounds = map.getBounds();
            const ne = bounds.getNorthEast();
            const sw = bounds.getSouthWest();
            
            const numCameras = 3 + Math.floor(Math.random() * 3); // 3-5 ‡∏ï‡∏±‡∏ß
            const cameraIcons = [
                'https://cdn-icons-png.flaticon.com/512/2103/2103633.png', // ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏°
                'https://cdn-icons-png.flaticon.com/512/2103/2103653.png', // ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ö‡∏π‡∏•‡πÄ‡∏•‡πá‡∏ï
                'https://cdn-icons-png.flaticon.com/512/2103/2103667.png'  // ‡∏Å‡∏•‡πâ‡∏≠‡∏á PTZ
            ];
            
            for (let i = 0; i < numCameras; i++) {
                const lat = sw.lat + Math.random() * (ne.lat - sw.lat);
                const lng = sw.lng + Math.random() * (ne.lng - sw.lng);
                const cameraType = Math.floor(Math.random() * cameraIcons.length);
                
                const cameraIcon = L.icon({
                    iconUrl: cameraIcons[cameraType],
                    iconSize: [32, 32],
                    iconAnchor: [16, 16],
                    popupAnchor: [0, -16]
                });
                
                const camera = L.marker([lat, lng], {
                    icon: cameraIcon,
                    draggable: true
                }).addTo(map);
                
                camera.bindPopup(`‡∏Å‡∏•‡πâ‡∏≠‡∏á ${i+1}<br>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${['‡πÇ‡∏î‡∏°', '‡∏ö‡∏π‡∏•‡πÄ‡∏•‡πá‡∏ï', 'PTZ'][cameraType]}`);
                cameras.push(camera);
            }
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•
            updateCableLines();
            
            resultsDiv.innerHTML = `
                <h4>‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á</h4>
                <p>‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${numCameras} ‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÅ‡∏•‡πâ‡∏ß</p>
                <p>‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏≤‡∏Å‡∏ß‡∏≤‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</p>
                
                <div style="margin-top: 15px; padding: 10px; background: #f8f9fa; border-radius: 4px;">
                    <p><strong>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong></p>
                    <ul>
                        <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç</li>
                        <li>‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á</li>
                        <li>‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏à‡∏∏‡∏î‡∏ö‡∏≠‡∏î</li>
                    </ul>
                </div>
            `;
            
        }, 2000);
    });
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Å‡∏•‡πâ‡∏≠‡∏á
    function updateCableLines() {
        // ‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        cableLines.forEach(line => map.removeLayer(line));
        cableLines = [];
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
        for (let i = 1; i < cameras.length; i++) {
            const fromLatLng = cameras[i-1].getLatLng();
            const toLatLng = cameras[i].getLatLng();
            addCableLine(fromLatLng, toLatLng);
        }
    }
    
    // (‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ö‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà) ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏° "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤" ‡πÅ‡∏ó‡∏ô
    window.map = map;
}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á MCP Server
async function exportToMCPServer(projectData) {
    try {
        showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á MCP Server...', 'info');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á MCP
        const mcpData = {
            project: {
                name: projectData.metadata.projectName,
                description: 'CCTV Project Export',
                cameras: projectData.cameras.map(cam => ({
                    id: cam.id,
                    position: {
                        lat: cam.position.lat,
                        lng: cam.position.lng,
                        height: cam.height || 3.0
                    },
                    rotation: cam.angle || 0,
                    fov: cam.fov || 90,
                    type: cam.type || 'Dome'
                })),
                cables: projectData.cables.map((cable, index) => ({
                    id: cable.id,
                    points: cable.points.map(p => ({
                        lat: p.lat,
                        lng: p.lng,
                        height: 0.1 // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô
                    })),
                    type: 'CAT6'
                }))
            },
            analysis: {
                timestamp: new Date().toISOString(),
                images: capturedPhotos.filter(photo => photo.mcpResults).map(photo => ({
                    id: photo.id,
                    position: photo.position,
                    timestamp: photo.timestamp,
                    analysis: photo.mcpResults,
                    image_url: photo.analyzedImage || photo.data
                }))
            }
        };

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á MCP Server
        const response = await fetch('https://api.mcp.example.com/v1/projects', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${MCP_CONFIG.API_KEY}`
            },
            body: JSON.stringify(mcpData)
        });

        if (!response.ok) {
            throw new Error('Failed to export to MCP Server');
        }

        const result = await response.json();
        showNotification('‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á MCP Server ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
        return result;
    } catch (error) {
        console.error('Export to MCP Server failed:', error);
        showNotification('‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á MCP Server ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß', 'error');
        throw error;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Blender
function exportToBlender() {
    const projectData = {
        cameras: [],
        cables: [],
        building: {
            width: 0,
            length: 0,
            height: 0,
            walls: []
        },
        metadata: {
            projectName: 'CCTV_Project_' + new Date().toISOString().split('T')[0],
            exportDate: new Date().toISOString(),
            totalCameras: 0,
            totalCableLength: totalDistance
        }
    };

    // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á
    cameras.forEach(cam => {
        projectData.cameras.push({
            id: cam.id,
            position: cam.marker.getLatLng(),
            type: cam.type || 'Dome',
            angle: cam.angle || 0,
            height: cam.height || 3.0,
            fov: cam.fov || 90
        });
    });

    // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•
    cableLines.forEach((line, index) => {
        const latlngs = line.getLatLngs();
        projectData.cables.push({
            id: `cable_${index}`,
            points: latlngs,
            length: line.length || 0,
            type: 'CAT6'
        });
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Python ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Blender
    const blendTemplate = `import bpy\nimport math\n\n# ‡∏•‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\nbpy.ops.object.select_all(action='SELECT')\nbpy.ops.object.delete()\n\n# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á\ncameras = ${JSON.stringify(projectData.cameras, null, 2)}\nfor cam_data in cameras:\n    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á\n    bpy.ops.object.camera_add(location=(cam_data.position.lng, cam_data.position.lat, cam_data.height || 3.0))\n    camera = bpy.context.active_object\n    camera.name = f\"Camera_{cam_data.id}\"\n    camera.rotation_euler = (math.radians(90), 0, math.radians(cam_data.angle || 0))\n    \n    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á\n    camera.data.lens = 4.5  # ‡∏°‡∏°.\n    camera.data.sensor_width = 6.16  # ‡∏°‡∏°.\n    camera.data.angle = math.radians(cam_data.fov || 90)\n    \n    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á\n    bpy.ops.mesh.primitive_cube_add(size=0.3, location=(cam_data.position.lng, cam_data.position.lat, cam_data.height || 3.0))\n    cam_box = bpy.context.active_object\n    cam_box.name = f\"Camera_Box_{cam_data.id}\"\n    cam_box.scale = (0.2, 0.2, 0.1)\n    cam_box.rotation_euler = (0, 0, math.radians(cam_data.angle || 0))\n\n# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•\ncables = ${JSON.stringify(projectData.cables, null, 2)}\nfor cable in cables:\n    points = [(p.lng, p.lat, 0.1) for p in cable.points]\n    \n    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•\n    curve_data = bpy.data.curves.new('cable', type='CURVE')\n    curve_data.dimensions = '3D'\n    curve_data.resolution_u = 2\n    \n    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á\n    polyline = curve_data.splines.new('POLY')\n    polyline.points.add(len(points)-1)\n    for i, coord in enumerate(points):\n        x, y, z = coord\n        polyline.points[i].co = (x, y, z, 1)\n    \n    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÄ‡∏™‡πâ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á\n    cable_obj = bpy.data.objects.new('Cable', curve_data)\n    cable_obj.data.bevel_depth = 0.02\n    bpy.context.collection.objects.link(cable_obj)\n\n# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á\nbpy.context.scene.render.engine = 'CYCLES'\nbpy.context.scene.render.resolution_x = 1920\nbpy.context.scene.render.resolution_y = 1080\nbpy.context.scene.render.resolution_percentage = 100\n\nprint(\"Import CCTV data to Blender completed!\")\n`;

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
    const statusElement = document.getElementById('blenderExportStatus');
    if (statusElement) {
        statusElement.style.display = 'block';
        statusElement.innerHTML = '<i class="fas fa-sync fa-spin" style="color: #17a2b8;"></i> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå...';
        
        // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
        setTimeout(() => {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Blob ‡πÅ‡∏•‡∏∞‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
            const blob = new Blob([blendTemplate], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `cctv_export_${new Date().toISOString().split('T')[0]}.py`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            statusElement.innerHTML = '<i class="fas fa-check-circle" style="color: #28a745;"></i> ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå...';
            statusElement.style.background = '#e9f7ef';
            
            // ‡∏ã‡πà‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            setTimeout(() => {
                statusElement.style.display = 'none';
            }, 5000);
        }, 1000);
    }
}

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MCP
const MCP_CONFIG = {
    API_URL: 'https://api.mcp.example.com/v1',
    API_KEY: 'YOUR_MCP_API_KEY', // ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏à‡∏£‡∏¥‡∏á
    MODEL_IDS: {
        OBJECT_DETECTION: 'mcp-object-detection-v2',
        FACE_RECOGNITION: 'mcp-face-recognition-v1',
        LICENSE_PLATE: 'mcp-license-plate-v1'
    },
    DETECTION_CONFIDENCE: 0.7
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ MCP API
async function callMCPApi(endpoint, data) {
    try {
        const response = await fetch(`${MCP_CONFIG.API_URL}/${endpoint}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${MCP_CONFIG.API_KEY}`,
                'X-Model-ID': MCP_CONFIG.MODEL_IDS.OBJECT_DETECTION
            },
            body: JSON.stringify(data)
        });

        if (!response.ok) {
            throw new Error(`MCP API Error: ${response.statusText}`);
        }

        return await response.json();
    } catch (error) {
        console.error('MCP API Call Failed:', error);
        showNotification('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MCP ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß', 'error');
        throw error;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ MCP
async function analyzeWithMCP(imageData) {
    try {
        showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ MCP...', 'info');
        
        const result = await callMCPApi('analyze/image', {
            image: imageData.split(',')[1], // ‡∏•‡∏ö header base64
            confidence_threshold: MCP_CONFIG.DETECTION_CONFIDENCE,
            features: ['objects', 'faces', 'license_plates']
        });

        return result;
    } catch (error) {
        console.error('Analysis failed:', error);
        showNotification('‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß', 'error');
        return null;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏ô Canvas
function drawMCPResults(canvas, results) {
    const ctx = canvas.getContext('2d');
    
    // ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏û‡∏ö
    if (results.objects) {
        results.objects.forEach(obj => {
            // ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö
            ctx.strokeStyle = '#FF0000';
            ctx.lineWidth = 2;
            ctx.strokeRect(obj.bbox.x, obj.bbox.y, obj.bbox.width, obj.bbox.height);
            
            // ‡∏ß‡∏≤‡∏î‡∏õ‡πâ‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠
            ctx.fillStyle = '#FF0000';
            const text = `${obj.label} (${(obj.confidence * 100).toFixed(1)}%)`;
            const textWidth = ctx.measureText(text).width;
            ctx.fillRect(obj.bbox.x - 2, obj.bbox.y - 20, textWidth + 4, 20);
            
            // ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            ctx.fillStyle = '#FFFFFF';
            ctx.font = '12px Arial';
            ctx.fillText(text, obj.bbox.x, obj.bbox.y - 5);
        });
    }
}

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡πâ‡∏≠‡∏á
let stream = null;
let capturedPhotos = [];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
async function startCamera() {
    try {
        const video = document.getElementById('cameraView');
        const noCamera = document.getElementById('noCamera');
        
        // ‡∏õ‡∏¥‡∏î‡∏™‡∏ï‡∏£‡∏µ‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (stream) {
            stream.getTracks().forEach(track => track.stop());
        }
        
        // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
        stream = await navigator.mediaDevices.getUserMedia({ 
            video: { 
                width: { ideal: 1280 },
                height: { ideal: 720 },
                facingMode: 'environment' 
            } 
        });
        
        video.srcObject = stream;
        video.style.display = 'block';
        noCamera.style.display = 'none';
        
        // ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
        document.getElementById('capturePhoto').disabled = false;
        
        await video.play();
    } catch (err) {
        console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ:', err);
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ MCP ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
async function analyzeCapturedPhoto(photoData) {
    try {
        const results = await analyzeWithMCP(photoData);
        if (results) {
            // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ö‡∏ô Canvas
            const canvas = document.createElement('canvas');
            const img = new Image();
            img.onload = function() {
                canvas.width = img.width;
                canvas.height = img.height;
                const ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0);
                
                // ‡∏ß‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
                drawMCPResults(canvas, results);
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                const resultContainer = document.createElement('div');
                resultContainer.className = 'mcp-result';
                resultContainer.style.marginTop = '10px';
                resultContainer.innerHTML = `
                    <h5>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå MCP</h5>
                    <div class="mcp-stats">
                        <span>‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏: ${results.objects?.length || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
                        <span>‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤: ${results.faces?.length || 0} ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤</span>
                        <span>‡∏û‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: ${results.license_plates?.length || 0} ‡∏õ‡πâ‡∏≤‡∏¢</span>
                    </div>
                    <div class="mcp-image-container">
                        <img src="${canvas.toDataURL('image/jpeg')}" style="max-width: 100%; border: 1px solid #ddd; border-radius: 4px;">
                    </div>
                `;
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤
                const resultsContainer = document.getElementById('analysisResultsInner') || document.getElementById('analysisResults');
                if (resultsContainer) {
                    resultsContainer.appendChild(resultContainer);
                }
                
                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á‡πÉ‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                const currentPhoto = capturedPhotos[capturedPhotos.length - 1];
                if (currentPhoto) {
                    currentPhoto.mcpResults = results;
                    currentPhoto.analyzedImage = canvas.toDataURL('image/jpeg');
                }
            };
            img.src = photoData;
        }
    } catch (error) {
        console.error('Error analyzing photo:', error);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
function capturePhoto() {
    const video = document.getElementById('cameraView');
    const canvas = document.getElementById('photoCanvas');
    const photoList = document.getElementById('photoList');
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î Canvas ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    
    // ‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏•‡∏á‡∏ö‡∏ô Canvas
    const ctx = canvas.getContext('2d');
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
    
    // ‡πÅ‡∏õ‡∏•‡∏á Canvas ‡πÄ‡∏õ‡πá‡∏ô Data URL
    const photoData = canvas.toDataURL('image/jpeg', 0.8);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå
    const photoId = 'photo_' + Date.now();
    capturedPhotos.push({
        id: photoId,
        data: photoData,
        timestamp: new Date().toISOString(),
        position: map.getCenter() // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    });
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢
    updatePhotoList();
    
    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û
    showNotification('‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û...', 'success');
    
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ MCP
    analyzeCapturedPhoto(photoData);
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
function updatePhotoList() {
    const photoList = document.getElementById('photoList');
    photoList.innerHTML = '';
    
    capturedPhotos.forEach((photo, index) => {
        const photoItem = document.createElement('div');
        photoItem.className = 'photo-thumbnail';
        photoItem.innerHTML = `
            <img src="${photo.data}" alt="‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${index + 1}" data-id="${photo.id}">
            <div class="remove-photo" data-id="${photo.id}" title="‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û">√ó</div>
        `;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏π‡∏õ
        photoItem.querySelector('img').addEventListener('click', () => {
            // ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
            map.setView(photo.position, 18);
        });
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö
        photoItem.querySelector('.remove-photo').addEventListener('click', (e) => {
            e.stopPropagation();
            removePhoto(photo.id);
        });
        
        photoList.appendChild(photoItem);
    });
}

// ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
function removePhoto(photoId) {
    capturedPhotos = capturedPhotos.filter(photo => photo.id !== photoId);
    updatePhotoList();
}

// ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
function handlePhotoUpload(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = function(e) {
        const photoData = e.target.result;
        const photoId = 'upload_' + Date.now();
        
        capturedPhotos.push({
            id: photoId,
            data: photoData,
            timestamp: new Date().toISOString(),
            position: map.getCenter()
        });
        
        updatePhotoList();
        showNotification('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
    };
    
    reader.readAsDataURL(file);
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï input file ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ
    event.target.value = '';
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• 3D ‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
async function generate3DModel() {
    if (capturedPhotos.length < 3) {
        showNotification('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• 3D', 'error');
        return;
    }
    
    const processingSection = document.getElementById('processingSection');
    const processingText = document.getElementById('processingText');
    const progressBar = document.getElementById('progressBar');
    const result3D = document.getElementById('result3D');
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    processingSection.style.display = 'block';
    result3D.style.display = 'none';
    
    try {
        // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        let progress = 0;
        const interval = setInterval(() => {
            progress += 5;
            if (progress > 90) {
                clearInterval(interval);
                processingText.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• 3D...';
                
                // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
                setTimeout(() => {
                    processingSection.style.display = 'none';
                    result3D.style.display = 'block';
                    showNotification('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• 3D ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
                }, 2000);
            } else {
                progressBar.style.width = `${progress}%`;
                processingText.textContent = `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û... (${progress}%)`;
            }
        }, 200);
        
        // ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        // ‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• 3D
        // ‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ä‡πâ API ‡∏Ç‡∏≠‡∏á RealityCapture, Meshroom, ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        
    } catch (error) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• 3D:', error);
        showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• 3D', 'error');
        processingSection.style.display = 'none';
    }
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πÑ‡∏ï‡∏•‡πå CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    const style = document.createElement('style');
    style.textContent = `
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 4px;
            color: white;
            font-weight: 500;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            z-index: 1000;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
        }
        .notification.show {
            opacity: 1;
            transform: translateX(0);
        }
        .success { background-color: #28a745; }
        .error { background-color: #dc3545; }
        .info { background-color: #17a2b8; }
    `;
    document.head.appendChild(style);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    setTimeout(() => notification.classList.add('show'), 10);
    
    // ‡∏ã‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå MCP
const mcpStyles = document.createElement('style');
mcpStyles.textContent = `
    .mcp-result {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        padding: 15px;
        margin-top: 15px;
    }
    .mcp-stats {
        display: flex;
        gap: 15px;
        margin: 10px 0;
        padding: 8px;
        background: #e9ecef;
        border-radius: 4px;
        font-size: 14px;
    }
    .mcp-stats span {
        display: inline-flex;
        align-items: center;
        gap: 5px;
    }
    .mcp-stats span:before {
        content: '‚Ä¢';
        color: #6c757d;
    }
    .mcp-image-container {
        margin-top: 10px;
        text-align: center;
    }
`;
document.head.appendChild(mcpStyles);

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener('DOMContentLoaded', function() {
    // Blender Export
    const exportBtn = document.getElementById('exportToBlender');
    if (exportBtn) {
        exportBtn.addEventListener('click', exportToBlender);
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á MCP Server
    const exportToMCPBtn = document.createElement('button');
    exportToMCPBtn.className = 'drive-btn btn-primary';
    exportToMCPBtn.innerHTML = '<i class="fas fa-cloud-upload-alt"></i> ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á MCP';
    exportToMCPBtn.style.marginTop = '10px';
    exportToMCPBtn.style.width = '100%';
    exportToMCPBtn.addEventListener('click', async () => {
        try {
            const projectData = prepareProjectData();
            await exportToMCPServer(projectData);
        } catch (error) {
            console.error('Export to MCP failed:', error);
        }
    });
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á MCP Server
    const driveButtons = document.getElementById('driveButtons');
    if (driveButtons) {
        driveButtons.appendChild(exportToMCPBtn);
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
    function prepareProjectData() {
        return {
            cameras: cameras.map(cam => ({
                id: cam.id,
                position: cam.marker.getLatLng(),
                type: cam.type || 'Dome',
                angle: cam.angle || 0,
                height: cam.height || 3.0,
                fov: cam.fov || 90
            })),
            cables: cableLines.map((line, index) => ({
                id: `cable_${index}`,
                points: line.getLatLngs(),
                length: line.length || 0,
                type: 'CAT6'
            })),
            metadata: {
                projectName: 'CCTV_Project_' + new Date().toISOString().split('T')[0],
                exportDate: new Date().toISOString(),
                totalCameras: cameras.length,
                totalCableLength: totalDistance
            }
        };
    }

    // ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ
    const startCameraBtn = document.getElementById('startCamera');
    const capturePhotoBtn = document.getElementById('capturePhoto');
    const uploadPhotoBtn = document.getElementById('uploadPhoto');
    const photoUpload = document.getElementById('photoUpload');
    const generateModelBtn = document.createElement('button');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• 3D
    generateModelBtn.className = 'btn btn-primary';
    generateModelBtn.innerHTML = '<i class="fas fa-cube"></i> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• 3D';
    generateModelBtn.style.marginTop = '10px';
    generateModelBtn.style.width = '100%';
    generateModelBtn.addEventListener('click', generate3DModel);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• 3D
    const capturedPhotosSection = document.getElementById('capturedPhotos');
    if (capturedPhotosSection) {
        capturedPhotosSection.appendChild(generateModelBtn);
    }
    
    // Event Listeners
    if (startCameraBtn) {
        startCameraBtn.addEventListener('click', startCamera);
    }
    
    if (capturePhotoBtn) {
        capturePhotoBtn.addEventListener('click', capturePhoto);
    }
    
    if (uploadPhotoBtn && photoUpload) {
        uploadPhotoBtn.addEventListener('click', () => photoUpload.click());
        photoUpload.addEventListener('change', handlePhotoUpload);
    }
    
    // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
    const exportModelBtn = document.getElementById('exportModel');
    if (exportModelBtn) {
        exportModelBtn.addEventListener('click', () => {
            // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
            const link = document.createElement('a');
            link.href = '#'; // ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô URL ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• 3D
            link.download = '3d_model.obj';
            link.click();
            showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• 3D', 'info');
        });
    }
    
    // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    const addToMapBtn = document.getElementById('addToMap');
    if (addToMapBtn) {
        addToMapBtn.addEventListener('click', () => {
            // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏•‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            showNotification('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏•‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
        });
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö real-time ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤
    const costInputs = [
        'utpPrice', 'fiberPrice', 'laborPriceUtp', 'laborPriceFiber', 'rackSize',
        'switchQty', 'nvrQty', 'upsQty', 'rackInstallation'
    ];
    costInputs.forEach(id => {
        const el = document.getElementById(id);
        if (el) {
            el.addEventListener('input', calculateCosts);
            el.addEventListener('change', calculateCosts);
        }
    });

    // ====== Event Listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà ======
    const drawAreaBtn = document.getElementById('drawArea');
    if (drawAreaBtn) {
        drawAreaBtn.addEventListener('click', toggleDrawArea);
    }

    const addRackBtn = document.getElementById('addRack');
    if (addRackBtn) {
        addRackBtn.addEventListener('click', addRackMode);
    }

    // Event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á
    const addBulletCameraBtn = document.getElementById('addBulletCamera');
    if (addBulletCameraBtn) {
        addBulletCameraBtn.addEventListener('click', addBulletCameraMode);
    }

    const addDomeCameraBtn = document.getElementById('addDomeCamera');
    if (addDomeCameraBtn) {
        addDomeCameraBtn.addEventListener('click', addDomeCameraMode);
    }

    const addPTZCameraBtn = document.getElementById('addPTZCamera');
    if (addPTZCameraBtn) {
        addPTZCameraBtn.addEventListener('click', addPTZCameraMode);
    }

    const assignToRackBtn = document.getElementById('assignToRack');
    if (assignToRackBtn) {
        assignToRackBtn.addEventListener('click', assignCurrentCamToRack);
    }

    const connectRacksBtn = document.getElementById('connectRacks');
    if (connectRacksBtn) {
        connectRacksBtn.addEventListener('click', connectSelectedRacks);
    }

    const deleteConnectionBtn = document.getElementById('deleteConnection');
    if (deleteConnectionBtn) {
        deleteConnectionBtn.addEventListener('click', deleteSelectedConnection);
    }

    const deleteAllBtn = document.getElementById('deleteAll');
    if (deleteAllBtn) {
        deleteAllBtn.addEventListener('click', deleteAll);
    }

    const deleteCameraBtn = document.getElementById('deleteCamera');
    if (deleteCameraBtn) {
        deleteCameraBtn.addEventListener('click', deleteCurrentCamera);
    }

    const deleteRackBtn = document.getElementById('deleteRack');
    if (deleteRackBtn) {
        deleteRackBtn.addEventListener('click', deleteSelectedRack);
    }

    const deleteOverlayBtn = document.getElementById('deleteOverlay');
    if (deleteOverlayBtn) {
        deleteOverlayBtn.addEventListener('click', deleteCurrentOverlay);
    }

    // Wire up rectangle overlay controls
    try { wireOverlayControls(); } catch (e) { console.warn('wireOverlayControls failed:', e); }

    // Wire up camera controls
    try { wireCameraControls(); } catch (e) { console.warn('wireCameraControls failed:', e); }

    // ====== Event Listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà ======
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
    const saveProjectBtn = document.getElementById('saveProject');
    if (saveProjectBtn) {
        saveProjectBtn.addEventListener('click', saveProject);
    }

    // ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
    const loadProjectBtn = document.getElementById('loadProject');
    if (loadProjectBtn) {
        loadProjectBtn.addEventListener('click', () => {
            document.getElementById('loadProjectFile').click();
        });
    }

    // ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    const printMapBtn = document.getElementById('printMap');
    if (printMapBtn) {
        printMapBtn.addEventListener('click', printMap);
    }

    // ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    const exportImageBtn = document.getElementById('exportImage');
    if (exportImageBtn) {
        exportImageBtn.addEventListener('click', exportMapAsImage);
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    const addLocationTextBtn = document.getElementById('addLocationText');
    if (addLocationTextBtn) {
        addLocationTextBtn.addEventListener('click', enableLocationTextMode);
    }

    // ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
    const loadProjectFile = document.getElementById('loadProjectFile');
    if (loadProjectFile) {
        loadProjectFile.addEventListener('change', loadProjectFromFile);
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
    try { calculateCosts(); } catch (e) { /* ignore */ }
}

// ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà ======

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
var locationTexts = [];
var locationTextMode = false;

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
function saveProject() {
    const projectData = {
        cameras: cameras.map(cam => ({
            ...cam,
            marker: null // ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å marker object
        })),
        racks: racks,
        poles: poles,
        rackLinks: rackLinks,
        cableConnections: cableConnections.map(conn => ({
            ...conn,
            line: null // ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å line object
        })),
        rectOverlays: rectOverlays,
        locationTexts: locationTexts,
        areaPoints: areaPoints,
        timestamp: new Date().toISOString(),
        version: '1.0'
    };

    const dataStr = JSON.stringify(projectData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `cctv_project_${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    
    showNotification('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
}

// ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
function loadProjectFromFile(event) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const projectData = JSON.parse(e.target.result);
            
            // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
            deleteAll();
            
            // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
            if (projectData.cameras) {
                cameras = projectData.cameras;
                cameras.forEach(cam => {
                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á marker ‡πÉ‡∏´‡∏°‡πà
                    let icon;
                    if (cam.type === 'ptz') {
                        icon = L.divIcon({
                            className: 'ptz-icon',
                            html: '<i class="fas fa-video"></i>',
                            iconSize: [24, 24],
                            iconAnchor: [12, 12]
                        });
                    } else if (cam.type === 'pole') {
                        icon = L.divIcon({
                            className: 'pole-icon',
                            html: '<i class="fas fa-flag"></i>',
                            iconSize: [8, 30],
                            iconAnchor: [4, 30]
                        });
                    } else {
                        icon = L.divIcon({
                            className: 'camera-icon',
                            html: '<i class="fas fa-camera"></i>',
                            iconSize: [20, 20],
                            iconAnchor: [10, 10]
                        });
                    }
                    
                    const marker = L.marker(cam.latlng, { 
                        title: cam.name, 
                        draggable: true,
                        icon: icon
                    }).addTo(map);
                    
                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á popup
                    const popupContent = `
                        <div>
                            <strong>${cam.name}</strong><br>
                            <small>${cam.type === 'ptz' ? '‡∏Å‡∏•‡πâ‡∏≠‡∏á PTZ' : cam.type === 'pole' ? '‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á' : '‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤'}</small><br>
                            <button onclick="editCamera('${cam.id}')" class="btn btn-sm btn-primary">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                            <button onclick="deleteCameraById('${cam.id}')" class="btn btn-sm btn-danger">‡∏•‡∏ö</button>
                        </div>
                    `;
                    marker.bindPopup(popupContent);
                    
                    // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠
                    const offset = cam.type === 'pole' ? [0, -35] : [0, -15];
                    marker.bindTooltip(cam.name, { 
                        permanent: true, 
                        direction: 'top', 
                        offset: offset, 
                        className: 'camera-label' 
                    });
                    
                    // Event listeners
                    marker.on('click', () => selectCamera(cam));
                    marker.on('drag', () => updateCameraPosition(cam));
                    marker.on('dragend', () => { 
                        try { calculateCosts(); } catch(_){} 
                    });
                    marker.on('dblclick', () => editCameraName(cam));
                    
                    cam.marker = marker;
                });
            }
            
            if (projectData.racks) {
                racks = projectData.racks;
                racks.forEach(rack => {
                    if (rack.marker) {
                        rack.marker.addTo(map);
                    }
                });
            }
            
            if (projectData.poles) {
                poles = projectData.poles;
                poles.forEach(pole => {
                    if (pole.marker) {
                        pole.marker.addTo(map);
                    }
                });
            }
            
            if (projectData.rackLinks) {
                rackLinks = projectData.rackLinks;
                rackLinks.forEach(link => {
                    if (link.line) {
                        link.line.addTo(map);
                    }
                });
            }
            
            if (projectData.cableConnections) {
                cableConnections = projectData.cableConnections;
                cableConnections.forEach(conn => {
                    const fromPos = getDevicePosition(conn.fromId);
                    const toPos = getDevicePosition(conn.toId);
                    
                    if (fromPos && toPos) {
                        const color = getCableColor(conn.cableType);
                        const line = L.polyline([fromPos, toPos], {
                            color: color,
                            weight: 3,
                            opacity: 0.8
                        }).addTo(map);
                        
                        line.bindPopup(`
                            <div>
                                <strong>‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•</strong><br>
                                <small>‡∏à‡∏≤‡∏Å: ${getDeviceName(conn.fromId)}</small><br>
                                <small>‡πÑ‡∏õ: ${getDeviceName(conn.toId)}</small><br>
                                <small>‡∏ä‡∏ô‡∏¥‡∏î: ${getCableTypeName(conn.cableType)}</small><br>
                                <small>‡∏ó‡πà‡∏≠: ${getConduitTypeName(conn.conduitType)} ${conn.conduitSize}"</small><br>
                                <small>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: ${conn.length.toFixed(1)} ‡∏°.</small><br>
                                <small>‡∏£‡∏≤‡∏Ñ‡∏≤: ${conn.price.toFixed(2)} ‡∏ö‡∏≤‡∏ó</small><br>
                                <button onclick="deleteCableById('${conn.fromId}_${conn.toId}')" class="btn btn-sm btn-danger">‡∏•‡∏ö</button>
                            </div>
                        `);
                        
                        conn.line = line;
                    }
                });
                
                updateCableList();
                updateCablePrice();
            }
            
            if (projectData.rectOverlays) {
                rectOverlays = projectData.rectOverlays;
                rectOverlays.forEach(overlay => {
                    if (overlay.polygon) {
                        overlay.polygon.addTo(map);
                    }
                    if (overlay.centerMarker) {
                        overlay.centerMarker.addTo(map);
                    }
                    if (overlay.cornerMarkers) {
                        overlay.cornerMarkers.forEach(marker => {
                            if (marker) marker.addTo(map);
                        });
                    }
                });
            }
            
            if (projectData.locationTexts) {
                locationTexts = projectData.locationTexts;
                locationTexts.forEach(textObj => {
                    if (textObj.marker) {
                        textObj.marker.addTo(map);
                    }
                });
            }
            
            if (projectData.areaPoints) {
                areaPoints = projectData.areaPoints;
                if (areaPoints.length >= 3) {
                    areaPolygon = L.polygon(areaPoints, { color: '#ffc107', fillOpacity: 0.1 }).addTo(map);
                }
            }
            
            showNotification('‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
            calculateCosts();
            
        } catch (error) {
            showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: ' + error.message, 'error');
        }
    };
    reader.readAsText(file);
}

// ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
function printMap() {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå
    const printWindow = window.open('', '_blank');
    const mapContainer = document.getElementById('map');
    const mapClone = mapContainer.cloneNode(true);
    
    printWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
            <title>CCTV Planner - ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà</title>
            <style>
                body { margin: 0; padding: 20px; font-family: Arial, sans-serif; }
                .print-header { text-align: center; margin-bottom: 20px; }
                .print-info { margin-bottom: 20px; }
                .print-info table { width: 100%; border-collapse: collapse; }
                .print-info td { padding: 5px; border: 1px solid #ddd; }
                .map-container { width: 100%; height: 600px; border: 1px solid #ccc; }
            </style>
        </head>
        <body>
            <div class="print-header">
                <h1>CCTV Planner - ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ß‡∏á‡∏à‡∏£‡∏õ‡∏¥‡∏î</h1>
                <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå: ${new Date().toLocaleDateString('th-TH')}</p>
            </div>
            
            <div class="print-info">
                <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ</h3>
                <table>
                    <tr><td>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á</td><td>${cameras.length} ‡∏ï‡∏±‡∏ß</td></tr>
                    <tr><td>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏π‡πâ Rack</td><td>${racks.length} ‡∏ï‡∏π‡πâ</td></tr>
                    <tr><td>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•</td><td>${rackLinks.length} ‡πÄ‡∏™‡πâ‡∏ô</td></tr>
                    <tr><td>‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°</td><td>${(totalDistance/1000).toFixed(2)} ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£</td></tr>
                </table>
            </div>
            
            <div class="map-container">
                <p style="text-align: center; padding: 20px;">‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</p>
            </div>
        </body>
        </html>
    `);
    
    printWindow.document.close();
    printWindow.focus();
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå
    setTimeout(() => {
        printWindow.print();
        printWindow.close();
    }, 1000);
    
    showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå...', 'info');
}

// ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
function exportMapAsImage() {
    // ‡πÉ‡∏ä‡πâ html2canvas ‡∏´‡∏£‡∏∑‡∏≠ dom-to-image ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
    if (typeof html2canvas !== 'undefined') {
        html2canvas(document.getElementById('map')).then(canvas => {
            const link = document.createElement('a');
            link.download = `cctv_map_${new Date().toISOString().split('T')[0]}.png`;
            link.href = canvas.toDataURL();
            link.click();
            showNotification('‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
        });
    } else {
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏≥‡∏£‡∏≠‡∏á: ‡πÉ‡∏ä‡πâ screenshot ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î PrtScn ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠', 'info');
    }
}

// ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
function enableLocationTextMode() {
    const textInput = document.getElementById('locationText');
    const text = textInput.value.trim();
    
    if (!text) {
        showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô', 'warning');
        return;
    }
    
    locationTextMode = true;
    showNotification('‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ' + text, 'info');
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    const tempClickHandler = (e) => {
        addLocationTextToMap(e.latlng, text);
        map.off('click', tempClickHandler);
        locationTextMode = false;
        textInput.value = '';
    };
    
    map.on('click', tempClickHandler);
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
function addLocationTextToMap(latlng, text) {
    const id = 'text_' + Date.now();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á marker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const marker = L.marker(latlng, {
        icon: L.divIcon({
            className: 'location-text-marker',
            html: `<div style="background: white; border: 2px solid #007bff; border-radius: 5px; padding: 5px 10px; font-weight: bold; color: #007bff; white-space: nowrap;">${text}</div>`,
            iconSize: [200, 30],
            iconAnchor: [100, 15]
        }),
        draggable: true
    }).addTo(map);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° popup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    marker.bindPopup(`
        <div>
            <input type="text" id="editText_${id}" value="${text}" style="width: 100%; margin-bottom: 5px;">
            <button onclick="editLocationText('${id}')" class="btn btn-sm btn-primary">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
            <button onclick="deleteLocationText('${id}')" class="btn btn-sm btn-danger">‡∏•‡∏ö</button>
        </div>
    `);
    
    const textObj = { id, text, marker, latlng };
    locationTexts.push(textObj);
    
    showNotification('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
}

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
function editLocationText(id) {
    const textObj = locationTexts.find(t => t.id === id);
    if (!textObj) return;
    
    const newText = document.getElementById(`editText_${id}`).value.trim();
    if (!newText) return;
    
    textObj.text = newText;
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï marker
    textObj.marker.setIcon(L.divIcon({
        className: 'location-text-marker',
        html: `<div style="background: white; border: 2px solid #007bff; border-radius: 5px; padding: 5px 10px; font-weight: bold; color: #007bff; white-space: nowrap;">${newText}</div>`,
        iconSize: [200, 30],
        iconAnchor: [100, 15]
    }));
    
    textObj.marker.closePopup();
    showNotification('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
}

// ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
function deleteLocationText(id) {
    const textObj = locationTexts.find(t => t.id === id);
    if (!textObj) return;
    
    map.removeLayer(textObj.marker);
    locationTexts = locationTexts.filter(t => t.id !== id);
    
    showNotification('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
}

// Event Listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á
document.addEventListener('DOMContentLoaded', function() {
    const addPoleBtn = document.getElementById('addPole');
    if (addPoleBtn) {
        addPoleBtn.addEventListener('click', addPoleMode);
    }
    
    const deletePoleBtn = document.getElementById('deletePole');
    if (deletePoleBtn) {
        deletePoleBtn.addEventListener('click', () => {
            if (poles.length === 0) {
                showNotification('‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏•‡∏ö', 'warning');
                return;
            }
            const poleToDelete = poles[poles.length - 1];
            map.removeLayer(poleToDelete.marker);
            poles = poles.filter(p => p.id !== poleToDelete.id);
            showNotification('‡∏•‡∏ö‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + poleToDelete.name, 'success');
        });
    }

    // Event Listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•
    const connectCableBtn = document.getElementById('connectCable');
    if (connectCableBtn) {
        connectCableBtn.addEventListener('click', connectCable);
    }

    const deleteCableBtn = document.getElementById('deleteCable');
    if (deleteCableBtn) {
        deleteCableBtn.addEventListener('click', deleteSelectedCable);
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô dropdown
    updateCableDropdowns();
});

// ====== ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•‡πÅ‡∏•‡∏∞‡∏ó‡πà‡∏≠ ======
var cableConnections = []; // { fromId, toId, cableType, conduitType, conduitSize, length, price, line }

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô dropdown
function updateCableDropdowns() {
    const cableFrom = document.getElementById('cableFrom');
    const cableTo = document.getElementById('cableTo');
    
    if (!cableFrom || !cableTo) return;
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤
    cableFrom.innerHTML = '<option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</option>';
    cableTo.innerHTML = '<option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</option>';
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏π‡πâ Rack
    racks.forEach(rack => {
        const option = document.createElement('option');
        option.value = `rack_${rack.id}`;
        option.textContent = `‡∏ï‡∏π‡πâ Rack: ${rack.name}`;
        cableFrom.appendChild(option.cloneNode(true));
        cableTo.appendChild(option);
    });
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á
    poles.forEach(pole => {
        const option = document.createElement('option');
        option.value = `pole_${pole.id}`;
        option.textContent = `‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á: ${pole.name}`;
        cableFrom.appendChild(option.cloneNode(true));
        cableTo.appendChild(option);
    });
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
    cameras.forEach(cam => {
        const option = document.createElement('option');
        option.value = `camera_${cam.id}`;
        option.textContent = `‡∏Å‡∏•‡πâ‡∏≠‡∏á: ${cam.name || cam.id}`;
        cableFrom.appendChild(option.cloneNode(true));
        cableTo.appendChild(option);
    });
}

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•
function connectCable() {
    const fromId = document.getElementById('cableFrom').value;
    const toId = document.getElementById('cableTo').value;
    const cableType = document.getElementById('cableType').value;
    const conduitType = document.getElementById('conduitType').value;
    const conduitSize = document.getElementById('conduitSize').value;
    
    if (!fromId || !toId) {
        showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á', 'warning');
        return;
    }
    
    if (fromId === toId) {
        showNotification('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ', 'warning');
        return;
    }
    
    // ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
    const fromPos = getDevicePosition(fromId);
    const toPos = getDevicePosition(toId);
    
    if (!fromPos || !toPos) {
        showNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå', 'error');
        return;
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
    const length = fromPos.distanceTo(toPos);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤
    const price = calculateCablePrice(cableType, conduitType, conduitSize, length);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•
    const color = getCableColor(cableType);
    const line = L.polyline([fromPos, toPos], {
        color: color,
        weight: 3,
        opacity: 0.8
    }).addTo(map);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° popup ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    line.bindPopup(`
        <div>
            <strong>‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•</strong><br>
            <small>‡∏à‡∏≤‡∏Å: ${getDeviceName(fromId)}</small><br>
            <small>‡πÑ‡∏õ: ${getDeviceName(toId)}</small><br>
            <small>‡∏ä‡∏ô‡∏¥‡∏î: ${getCableTypeName(cableType)}</small><br>
            <small>‡∏ó‡πà‡∏≠: ${getConduitTypeName(conduitType)} ${conduitSize}"</small><br>
            <small>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: ${length.toFixed(1)} ‡∏°.</small><br>
            <small>‡∏£‡∏≤‡∏Ñ‡∏≤: ${price.toFixed(2)} ‡∏ö‡∏≤‡∏ó</small><br>
            <button onclick="deleteCableById('${fromId}_${toId}')" class="btn btn-sm btn-danger">‡∏•‡∏ö</button>
        </div>
    `);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const connection = {
        fromId: fromId,
        toId: toId,
        cableType: cableType,
        conduitType: conduitType,
        conduitSize: conduitSize,
        length: length,
        price: price,
        line: line
    };
    
    cableConnections.push(connection);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    updateCableList();
    updateCablePrice();
    
    showNotification(`‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${length.toFixed(1)} ‡∏°. (${price.toFixed(2)} ‡∏ö‡∏≤‡∏ó)`, 'success');
}

// ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
function getDevicePosition(deviceId) {
    const [type, id] = deviceId.split('_');
    
    if (type === 'rack') {
        const rack = racks.find(r => r.id === id);
        return rack ? rack.marker.getLatLng() : null;
    } else if (type === 'pole') {
        const pole = poles.find(p => p.id === id);
        return pole ? pole.marker.getLatLng() : null;
    } else if (type === 'camera') {
        const camera = cameras.find(c => c.id === id);
        return camera ? camera.position : null;
    }
    
    return null;
}

// ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
function getDeviceName(deviceId) {
    const [type, id] = deviceId.split('_');
    
    if (type === 'rack') {
        const rack = racks.find(r => r.id === id);
        return rack ? `‡∏ï‡∏π‡πâ Rack: ${rack.name}` : '‡πÑ‡∏°‡πà‡∏û‡∏ö';
    } else if (type === 'pole') {
        const pole = poles.find(p => p.id === id);
        return pole ? `‡πÄ‡∏™‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á: ${pole.name}` : '‡πÑ‡∏°‡πà‡∏û‡∏ö';
    } else if (type === 'camera') {
        const camera = cameras.find(c => c.id === id);
        return camera ? `‡∏Å‡∏•‡πâ‡∏≠‡∏á: ${camera.name || camera.id}` : '‡πÑ‡∏°‡πà‡∏û‡∏ö';
    }
    
    return '‡πÑ‡∏°‡πà‡∏û‡∏ö';
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•
function calculateCablePrice(cableType, conduitType, conduitSize, length) {
    let cablePrice = 0;
    let conduitPrice = 0;
    
    // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏• (‡∏ö‡∏≤‡∏ó/‡πÄ‡∏°‡∏ï‡∏£)
    switch (cableType) {
        case 'UTP': cablePrice = 15; break;
        case 'FIBER': cablePrice = 45; break;
        case 'COAX': cablePrice = 25; break;
        default: cablePrice = 15;
    }
    
    // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡πà‡∏≠ (‡∏ö‡∏≤‡∏ó/‡πÄ‡∏°‡∏ï‡∏£)
    switch (conduitType) {
        case 'PVC':
            switch (conduitSize) {
                case '0.5': conduitPrice = 8; break;
                case '0.75': conduitPrice = 12; break;
                case '1': conduitPrice = 18; break;
                case '1.25': conduitPrice = 25; break;
                case '1.5': conduitPrice = 35; break;
                case '2': conduitPrice = 50; break;
                default: conduitPrice = 18;
            }
            break;
        case 'METAL':
            switch (conduitSize) {
                case '0.5': conduitPrice = 15; break;
                case '0.75': conduitPrice = 22; break;
                case '1': conduitPrice = 30; break;
                case '1.25': conduitPrice = 40; break;
                case '1.5': conduitPrice = 55; break;
                case '2': conduitPrice = 80; break;
                default: conduitPrice = 30;
            }
            break;
        case 'FLEXIBLE':
            switch (conduitSize) {
                case '0.5': conduitPrice = 12; break;
                case '0.75': conduitPrice = 18; break;
                case '1': conduitPrice = 25; break;
                case '1.25': conduitPrice = 35; break;
                case '1.5': conduitPrice = 45; break;
                case '2': conduitPrice = 65; break;
                default: conduitPrice = 25;
            }
            break;
    }
    
    return (cablePrice + conduitPrice) * length;
}

// ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•
function getCableColor(cableType) {
    switch (cableType) {
        case 'UTP': return '#198754'; // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        case 'FIBER': return '#0d6efd'; // ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
        case 'COAX': return '#dc3545'; // ‡πÅ‡∏î‡∏á
        default: return '#6c757d'; // ‡πÄ‡∏ó‡∏≤
    }
}

// ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•
function getCableTypeName(cableType) {
    switch (cableType) {
        case 'UTP': return 'UTP (‡∏™‡∏≤‡∏¢‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á)';
        case 'FIBER': return 'Fiber (‡πÉ‡∏¢‡πÅ‡∏Å‡πâ‡∏ß‡∏ô‡∏≥‡πÅ‡∏™‡∏á)';
        case 'COAX': return 'Coaxial (‡∏™‡∏≤‡∏¢‡πÇ‡∏Ñ‡πÅ‡∏≠‡∏Å‡∏ã‡πå)';
        default: return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
    }
}

// ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏¥‡∏î‡∏ó‡πà‡∏≠
function getConduitTypeName(conduitType) {
    switch (conduitType) {
        case 'PVC': return 'PVC (‡∏ó‡πà‡∏≠‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å)';
        case 'METAL': return 'Metal (‡∏ó‡πà‡∏≠‡πÇ‡∏•‡∏´‡∏∞)';
        case 'FLEXIBLE': return 'Flexible (‡∏ó‡πà‡∏≠‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô)';
        default: return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
    }
}

// ‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•‡∏ï‡∏≤‡∏° ID
function deleteCableById(connectionId) {
    const connection = cableConnections.find(c => `${c.fromId}_${c.toId}` === connectionId);
    if (!connection) return;
    
    map.removeLayer(connection.line);
    cableConnections = cableConnections.filter(c => c !== connection);
    
    updateCableList();
    updateCablePrice();
    
    showNotification('‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
}

// ‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
function deleteSelectedCable() {
    if (cableConnections.length === 0) {
        showNotification('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡πâ‡∏•‡∏ö', 'warning');
        return;
    }
    
    const lastConnection = cableConnections[cableConnections.length - 1];
    deleteCableById(`${lastConnection.fromId}_${lastConnection.toId}`);
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•
function updateCableList() {
    const cableList = document.getElementById('cableList');
    if (!cableList) return;
    
    if (cableConnections.length === 0) {
        cableList.innerHTML = '<small class="text-muted">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•</small>';
        return;
    }
    
    let html = '';
    cableConnections.forEach((conn, index) => {
        html += `
            <div class="d-flex justify-content-between align-items-center mb-1">
                <small>${index + 1}. ${getDeviceName(conn.fromId)} ‚Üí ${getDeviceName(conn.toId)}</small>
                <button onclick="deleteCableById('${conn.fromId}_${conn.toId}')" class="btn btn-sm btn-outline-danger" style="font-size: 10px;">‡∏•‡∏ö</button>
            </div>
        `;
    });
    
    cableList.innerHTML = html;
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•
function updateCablePrice() {
    const cableLength = document.getElementById('cableLength');
    const cablePrice = document.getElementById('cablePrice');
    
    if (!cableLength || !cablePrice) return;
    
    const totalLength = cableConnections.reduce((sum, conn) => sum + conn.length, 0);
    const totalPrice = cableConnections.reduce((sum, conn) => sum + conn.price, 0);
    
    cableLength.value = totalLength.toFixed(1);
    cablePrice.value = totalPrice.toFixed(2);
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ DOM ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener('DOMContentLoaded', function() {
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
    initializeToolsPanel();
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ
init();
    
    console.log('CCTV Planner ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
});
